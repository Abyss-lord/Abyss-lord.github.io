<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Gravitino 并发测试指南</title>
      <link href="/2025/07/02/gravitino/2025-07-02-jcstress/"/>
      <url>/2025/07/02/gravitino/2025-07-02-jcstress/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>在 Gravitino 中，我们使用&nbsp;<a href="https://github.com/openjdk/jcstress">JCStress</a>&nbsp;框架进行并发压力测试，以识别线程安全相关的微妙缺陷。这类问题往往难以通过传统的单元测试捕捉，例如：</p><ul><li>数据竞争（Race Condition）</li><li>内存可见性问题（Visibility Violation）</li><li>原子性缺失（Atomicity Violation）</li></ul><p>JCStress 能有效帮助我们验证并发代码的正确性，确保缓存、元数据等核心组件具备良好的线程安全保障。</p><h2 id="什么是-jcstress"><a class="markdownIt-Anchor" href="#什么是-jcstress"></a> 什么是 JCStress？</h2><p><a href="https://github.com/openjdk/jcstress">JCStress</a>&nbsp;是 Oracle 官方提供的 Java 并发测试工具，专为检测并发场景下的非确定性错误而设计。其主要特性包括：</p><ul><li>在多个线程间并发执行操作，模拟实际竞争环境；</li><li>使用大量线程交错（Interleaving）组合反复运行；</li><li>揭示极低概率但高危的并发缺陷；</li><li>将测试结果分为三类：<strong>可接受（ACCEPTABLE）</strong>、<strong>禁止（FORBIDDEN）</strong>、<strong>值得关注（INTERESTING）</strong>。</li></ul><h2 id="如何运行测试"><a class="markdownIt-Anchor" href="#如何运行测试"></a> 如何运行测试</h2><p>在 Gravitino 中使用&nbsp;<a href="https://github.com/reyerizo/jcstress-gradle-plugin"><code>jcstress-gradle-plugin</code></a>&nbsp;将 JCStress 集成到 Gradle build 系统中。</p><p>该插件的优势如下：</p><ul><li>自动生成测试运行器（test harness）；</li><li>提供内置 Gradle 任务（如&nbsp;<code>:core:jcstress</code>）；</li><li>自动生成报告，在&nbsp;<code>build/reports/jcstress/</code>&nbsp;下生成详细的 HTML 报告。</li></ul><h3 id="运行测试的命令"><a class="markdownIt-Anchor" href="#运行测试的命令"></a> 运行测试的命令</h3><p>运行所有 JCStress 测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./gradlew :core:jcstress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>仅运行指定测试类（正则匹配）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gradle jcstress <span class="token parameter variable">--tests</span> <span class="token string">"MyFirstTest|MySecondTest"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完毕后，可以在如下位置查看报告： <code>core/build/reports/jcstress/index.html</code></p><blockquote><p>测试运行时间取决于测试复杂度与系统 CPU 资源，通常为数分钟至数十分钟不等。</p></blockquote><h2 id="解读测试结果"><a class="markdownIt-Anchor" href="#解读测试结果"></a> 解读测试结果</h2><p>JCStress 的测试结果以表格形式展示，包括：</p><ul><li>每种观察结果的内容与出现频率；</li><li>每个结果的期望分类（ACCEPTABLE/FORBIDDEN/INTERESTING）；</li><li>总迭代次数与执行时长。</li></ul><p>如果测试出现&nbsp;<strong>FAILED</strong>，说明检测到被定义为&nbsp;<strong>FORBIDDEN</strong>&nbsp;的结果，表示存在潜在并发问题。</p><h2 id="配置方式"><a class="markdownIt-Anchor" href="#配置方式"></a> 配置方式</h2><p>通过在&nbsp;<code>build.gradle</code>&nbsp;中添加如下配置，可调整测试策略：</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">jcstress <span class="token punctuation">{</span>    verbose <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"true"</span></span>    timeMillis <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"200"</span></span>    spinStyle <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"THREAD_YIELD"</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用配置项说明：</p><table><thead><tr><th>配置项</th><th>说明</th></tr></thead><tbody><tr><td><code>mode</code></td><td>执行模式：<code>sanity</code>、<code>quick</code>、<code>default</code>、<code>tough</code>、<code>stress</code>。</td></tr><tr><td><code>cpuCount</code></td><td>使用的 CPU 核心数，默认使用全部。</td></tr><tr><td><code>forks</code></td><td>每个测试被 fork 的次数。</td></tr><tr><td><code>iterations</code></td><td>每个测试的迭代次数。</td></tr><tr><td><code>heapPerFork</code></td><td>每次 fork 的最大内存（MB）。</td></tr><tr><td><code>spinStyle</code></td><td>等待策略：如&nbsp;<code>THREAD_YIELD</code>、<code>HARD</code>&nbsp;等。</td></tr><tr><td><code>affinityMode</code></td><td>线程与 CPU 的绑定模式：<code>NONE</code>、<code>GLOBAL</code>、<code>LOCAL</code>。</td></tr><tr><td><code>jvmArgs/jvmArgsPrepend</code></td><td>设置 JVM 启动参数。</td></tr><tr><td><code>reportDir</code></td><td>报告输出目录。</td></tr></tbody></table><h2 id="如何编写-jcstress-测试"><a class="markdownIt-Anchor" href="#如何编写-jcstress-测试"></a> 如何编写 JCStress 测试</h2><p>JCStress 提供两种测试风格，适用于不同的并发验证场景。</p><h3 id="风格一基于-arbiter-的测试"><a class="markdownIt-Anchor" href="#风格一基于-arbiter-的测试"></a> 风格一：基于 Arbiter 的测试</h3><p>特点是通过独立的&nbsp;<code>@Arbiter</code>&nbsp;方法观察最终状态：</p><ol><li>定义共享变量；</li><li>用&nbsp;<code>@Actor</code>&nbsp;注解要并发执行的方法；</li><li>用&nbsp;<code>@Arbiter</code>&nbsp;注解标注最终的观察方法；</li><li>使用&nbsp;<code>@JCStressTest</code>&nbsp;+&nbsp;<code>@Outcome</code>&nbsp;标注预期结果。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JCStressTest</span><span class="token annotation punctuation">@Outcome</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">,</span> expect <span class="token operator">=</span> <span class="token class-name">Expect</span><span class="token punctuation">.</span><span class="token constant">ACCEPTABLE</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">"正常结果"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Outcome</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">,</span> expect <span class="token operator">=</span> <span class="token class-name">Expect</span><span class="token punctuation">.</span><span class="token constant">FORBIDDEN</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">"出现竞态"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@State</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArbiterTest</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Actor</span>    <span class="token keyword">void</span> <span class="token function">actor1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Actor</span>    <span class="token keyword">void</span> <span class="token function">actor2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Arbiter</span>    <span class="token keyword">void</span> <span class="token function">arbiter</span><span class="token punctuation">(</span><span class="token class-name">I_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="风格二直接结果记录direct-result-reporting"><a class="markdownIt-Anchor" href="#风格二直接结果记录direct-result-reporting"></a> 风格二：直接结果记录（Direct Result Reporting）</h3><p>特点是 <code>actor</code> 方法直接记录测试结果并写入结果对象</p><ol><li>定义共享变量；</li><li><code>@Actor</code>&nbsp;方法接收结果参数，如&nbsp;<code>II_Result</code>；</li><li>记录观察到的值；</li><li>使用&nbsp;<code>@Outcome</code>&nbsp;定义期望结果。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JCStressTest</span><span class="token annotation punctuation">@Outcome</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"0, 1"</span><span class="token punctuation">,</span> expect <span class="token operator">=</span> <span class="token class-name">Expect</span><span class="token punctuation">.</span><span class="token constant">ACCEPTABLE</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">"线程 2 看到了写入"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Outcome</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"0, 0"</span><span class="token punctuation">,</span> expect <span class="token operator">=</span> <span class="token class-name">Expect</span><span class="token punctuation">.</span><span class="token constant">ACCEPTABLE</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">"线程 2 没看到写入"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@State</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectReportingTest</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Actor</span>    <span class="token keyword">void</span> <span class="token function">actor1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Actor</span>    <span class="token keyword">void</span> <span class="token function">actor2</span><span class="token punctuation">(</span><span class="token class-name">II_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span>r2 <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可用&nbsp;<code>@Description</code>&nbsp;添加简要说明，需要避免过长字符串，否则可能会触发&nbsp;<code>StringIndexOutOfBoundsException</code>。</p></blockquote><h3 id="风格选择"><a class="markdownIt-Anchor" href="#风格选择"></a> 风格选择</h3><table><thead><tr><th>场景</th><th>推荐风格</th></tr></thead><tbody><tr><td>需要统一观察最终状态</td><td>Arbiter 风格</td></tr><tr><td>Actor 可即时记录观察结果</td><td>直接记录风格</td></tr><tr><td>关注可见性或重排序问题</td><td>直接记录风格</td></tr></tbody></table><h2 id="线程安全测试示例"><a class="markdownIt-Anchor" href="#线程安全测试示例"></a> 线程安全测试示例</h2><p>示例测试说明：</p><ul><li>两个&nbsp;<code>@Actor</code>&nbsp;并发往缓存中放入两个不同 key（schema 和 table）；</li><li><code>@Arbiter</code>&nbsp;验证缓存中是否存在这两个实体；</li><li>定义了三种结果：<ul><li><strong>2</strong>：两个都存在</li><li><strong>1</strong>：只存在一个</li><li><strong>0</strong>：都不存在</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> xxx <span class="token punctuation">{</span>  <span class="token comment">// some entity to test.</span>    <span class="token annotation punctuation">@JCStressTest</span>  <span class="token annotation punctuation">@Outcome.Outcomes</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Outcome</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">,</span> expect <span class="token operator">=</span> <span class="token class-name">Expect</span><span class="token punctuation">.</span><span class="token constant">ACCEPTABLE</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">"Both put() calls succeeded; both entries are visible in the cache."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Outcome</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">,</span> expect <span class="token operator">=</span> <span class="token class-name">Expect</span><span class="token punctuation">.</span><span class="token constant">FORBIDDEN</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">"Only one entry is visible; potential visibility or atomicity issue."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Outcome</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">,</span> expect <span class="token operator">=</span> <span class="token class-name">Expect</span><span class="token punctuation">.</span><span class="token constant">FORBIDDEN</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">"Neither entry is visible; indicates a serious failure in write propagation or cache logic."</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Description</span><span class="token punctuation">(</span><span class="token string">"Concurrent put() on different keys. Both schema and table should be visible (result = 2). "</span> <span class="token operator">+</span> <span class="token string">"Lower results may indicate visibility or concurrency issues."</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@State</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrentPutDifferentKeysTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EntityCache</span> cache<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ConcurrentPutDifferentKeysTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CaffeineEntityCache</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Actor</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actor1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>schemaEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Actor</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actor2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tableEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Arbiter</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">arbiter</span><span class="token punctuation">(</span><span class="token class-name">I_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>schemaEntity<span class="token punctuation">.</span><span class="token function">nameIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> schemaEntity<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tableEntity<span class="token punctuation">.</span><span class="token function">nameIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tableEntity<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>      r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token comment">// ... other test classes</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jcstress-测试生命周期"><a class="markdownIt-Anchor" href="#jcstress-测试生命周期"></a> JCStress 测试生命周期</h2><p>JCStress 遵循以下测试执行流程：</p><ol><li><strong>状态初始化</strong>：每次测试迭代前重新构造&nbsp;<code>@State</code>&nbsp;对象，确保隔离性；</li><li><strong>并发执行</strong>：多个&nbsp;<code>@Actor</code>&nbsp;方法并发运行，模拟真实竞争；</li><li><strong>内存屏障插入</strong>：确保执行顺序后再执行&nbsp;<code>@Arbiter</code>；</li><li><strong>结果判定</strong>：将每次迭代的结果与定义的&nbsp;<code>@Outcome</code>&nbsp;比较归类；</li><li><strong>高频迭代</strong>：每个测试重复运行百万次以上，以暴露极低概率的错误。</li></ol><h3 id="可用执行模式"><a class="markdownIt-Anchor" href="#可用执行模式"></a> 可用执行模式</h3><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td><code>sanity</code></td><td>快速检查测试是否配置正确（几秒）</td></tr><tr><td><code>quick</code></td><td>快速反馈，适合开发中使用（几十秒）</td></tr><tr><td><code>default</code></td><td>平衡模式，推荐常规使用（几分钟）</td></tr><tr><td><code>tough</code></td><td>强力模式，适合 CI 测试或发布前验证（较长时间）</td></tr></tbody></table><h2 id="问题类型"><a class="markdownIt-Anchor" href="#问题类型"></a> 问题类型</h2><p>JCStress 主要帮助检测如下并发问题：</p><ul><li><strong>竞态条件（Race Condition）</strong>：多个线程无同步访问共享变量；</li><li><strong>可见性问题</strong>：线程修改对其他线程不可见；</li><li><strong>原子性破坏</strong>：非原子操作被部分执行；</li><li><strong>执行顺序错误</strong>：由于 CPU/JVM 重排序导致的行为异常。</li></ul><h2 id="jcstress-编写建议"><a class="markdownIt-Anchor" href="#jcstress-编写建议"></a> Jcstress 编写建议</h2><ul><li>每个测试聚焦一个并发问题；</li><li>使用清晰的类名与注释解释每个结果；</li><li>避免使用非确定性行为（如&nbsp;<code>Thread.sleep()</code>）；</li><li>多次运行测试以验证稳定性；</li><li>对&nbsp;<strong>FORBIDDEN</strong>&nbsp;或&nbsp;<strong>INTERESTING</strong>&nbsp;的结果重点关注和修复。</li></ul><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://wiki.openjdk.java.net/display/CodeTools/jcstress">JCStress Official Documentation</a></li><li><a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.4">Java Memory Model Specification</a></li><li><a href="http://gee.cs.oswego.edu/dl/jmm/cookbook.html">Doug Lea’s JSR-133 Cookbook</a></li><li><a href="https://github.com/reyerizo/jcstress-gradle-plugin">jcstress-gradle-plugin</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gravitino </tag>
            
            <tag> JCStress </tag>
            
            <tag> gradle-plugin </tag>
            
            <tag> concurrency-testing </tag>
            
            <tag> thread-safety </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025-07-01-Gravitino-cache-system</title>
      <link href="/2025/07/01/gravitino/2025-07-01-gravitino-cache-system/"/>
      <url>/2025/07/01/gravitino/2025-07-01-gravitino-cache-system/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><ol><li>加载或创建表、模型、Fileset 时，频繁访问数据库以获取&nbsp;<code>metalake_id</code>、<code>catalog_id</code>、<code>schema_id</code>&nbsp;等元数据标识符，带来显著的性能开销；</li><li>casbin 在鉴权时需要根据 ID 进行权限判断，这需要频繁访问数据库获取 Entity 的 ID；</li><li>Role 信息加载涉及大量元数据对象，也需频繁查询数据库，进一步加剧性能瓶颈；</li><li>引入缓存机制可显著降低数据库访问频率，从而提升整体访问性能。</li></ol><h2 id="目标"><a class="markdownIt-Anchor" href="#目标"></a> 目标</h2><ol><li>支持根据 <code>NameIdentifier</code> 快速查找 <code>Entity</code>；</li><li>支持多种实现，包括本地内存缓存（如 Caffeine）与分布式缓存（如 Redis）；</li><li>插件化设计，便于扩展；</li><li>同时支持 <code>EntityStore</code>、 <code>SupportsRelationOperations</code> 和 <code>SupportsTagOperations</code> 全部操作；</li><li>不与底层 Storage 交互；</li></ol><h2 id="总体设计"><a class="markdownIt-Anchor" href="#总体设计"></a> 总体设计</h2><p><code>EntityCache</code> 的实现分为两个步骤：</p><ol><li>为 <code>EntityStore</code> 和 <code>SupportsRelationOperations</code> 的全部操作添加缓存；</li><li>合并 <code>SupportsTagOperations</code> 到 <code>SupportsRelationOperations</code>；</li></ol><p><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/20250530153818.png" alt="Gravitino 代码层次"></p><p><code>EntityCache</code>&nbsp;是 Store 层的缓存模块，采用插件化设计，可以支持本地内存缓存（如 Caffeine），也支持分布式缓存（如 Redis），主要用于加速元数据的读写操作。</p><p>设计分为两部分：</p><ul><li><strong>Cache Data</strong>：用于存储&nbsp;<code>Entity</code>&nbsp;本身；</li><li><strong>Cache Index</strong>：用于辅助前缀查询。</li></ul><p>缓存数据（Cache Data）</p><ul><li>支持 <code>NameIdentifier</code> + <code>EntityType</code> → <code>Entity</code> 的映射；</li><li>支持 <code>NameIdentifier</code> + <code>EntityType</code> + <code>RelationType</code> → <code>Entity</code> 列表的映射</li><li>缓存项支持可配置的过期策略，便于灵活控制缓存生命周期。</li></ul><p>缓存索引（Cache Index）</p><ul><li>支持基于名称前缀检索对应的 Entity 实体集合；</li><li>支持多种缓存过期策略，当 CacheData 中的缓存项因为策略过期被删除时，通过 <code>remove listener</code> 保持 Cache Index 同步删除。</li></ul><h2 id="接口定义与实现"><a class="markdownIt-Anchor" href="#接口定义与实现"></a> 接口定义与实现</h2><h3 id="entitycache"><a class="markdownIt-Anchor" href="#entitycache"></a> EntityCache</h3><p><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/20250619171744.png" alt="Entity Cache 接口"></p><p><code>EntityCache</code> 的接口类图设计如上，EntityCache 接口继承自 <code>SupportsEntityStoreCache</code> 和 <code>SupportsRelationEntityCache</code> 接口，这么设计的原因是为了区分适配的底层接口。</p><p><code>SupportsEntityStoreCache</code> 接口用于包装 <code>EntityStore</code> 接口，负责 Entity 的底层操作，其具体代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SupportsEntityStoreCache</span> <span class="token punctuation">{</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Entity</span> <span class="token operator">&amp;</span> <span class="token class-name">HasIdentifier</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">getIfPresent</span><span class="token punctuation">(</span>      <span class="token class-name">NameIdentifier</span> ident<span class="token punctuation">,</span> <span class="token class-name">Entity<span class="token punctuation">.</span>EntityType</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token class-name">NameIdentifier</span> ident<span class="token punctuation">,</span> <span class="token class-name">Entity<span class="token punctuation">.</span>EntityType</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">NameIdentifier</span> ident<span class="token punctuation">,</span> <span class="token class-name">Entity<span class="token punctuation">.</span>EntityType</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Entity</span> <span class="token operator">&amp;</span> <span class="token class-name">HasIdentifier</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">E</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Entity</span> <span class="token operator">&amp;</span> <span class="token class-name">HasIdentifier</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">invalidateOnKeyChange</span><span class="token punctuation">(</span><span class="token class-name">E</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>getIfPresent</code>：缓存中读取（不触发加载）；</li><li><code>invalidate</code>：显式清理缓存项；</li><li><code>invalidateOnKeyChange</code>：用于处理关联实体变更导致的联动清理。</li><li><code>contains</code>：检查特定键是否命中缓存；</li><li><code>put</code>：将一个 Entity 放入缓存；</li></ul><p><code>SupportsRelationEntityCache</code> 接口用于适配 <code>SupportsRelationOperations</code> 接口的操作，其具体定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SupportsRelationEntityCache</span> <span class="token punctuation">{</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Entity</span> <span class="token operator">&amp;</span> <span class="token class-name">HasIdentifier</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getIfPresent</span><span class="token punctuation">(</span>      <span class="token class-name">SupportsRelationOperations<span class="token punctuation">.</span>Type</span> relType<span class="token punctuation">,</span>      <span class="token class-name">NameIdentifier</span> nameIdentifier<span class="token punctuation">,</span>      <span class="token class-name">Entity<span class="token punctuation">.</span>EntityType</span> identType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">invalidate</span><span class="token punctuation">(</span>      <span class="token class-name">NameIdentifier</span> ident<span class="token punctuation">,</span> <span class="token class-name">Entity<span class="token punctuation">.</span>EntityType</span> type<span class="token punctuation">,</span> <span class="token class-name">SupportsRelationOperations<span class="token punctuation">.</span>Type</span> relType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>      <span class="token class-name">NameIdentifier</span> ident<span class="token punctuation">,</span> <span class="token class-name">Entity<span class="token punctuation">.</span>EntityType</span> type<span class="token punctuation">,</span> <span class="token class-name">SupportsRelationOperations<span class="token punctuation">.</span>Type</span> relType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Entity</span> <span class="token operator">&amp;</span> <span class="token class-name">HasIdentifier</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>      <span class="token class-name">NameIdentifier</span> ident<span class="token punctuation">,</span>      <span class="token class-name">Entity<span class="token punctuation">.</span>EntityType</span> type<span class="token punctuation">,</span>      <span class="token class-name">SupportsRelationOperations<span class="token punctuation">.</span>Type</span> relType<span class="token punctuation">,</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> entities<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该接口定义的方法同 <code>SupportsEntityStoreCache</code> 接口，唯一的区别在于参数列表多一个 <code>SupportsRelationOperations.Type</code>。</p><p>EntityCache 的具体代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EntityCache</span> <span class="token keyword">extends</span> <span class="token class-name">SupportsEntityStoreCache</span><span class="token punctuation">,</span> <span class="token class-name">SupportsRelationEntityCache</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">long</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">withCacheLock</span><span class="token punctuation">(</span><span class="token class-name">ThrowingRunnable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">E</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">withCacheLock</span><span class="token punctuation">(</span><span class="token class-name">ThrowingSupplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">E</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@FunctionalInterface</span>  <span class="token keyword">interface</span> <span class="token class-name">ThrowingSupplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">E</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@FunctionalInterface</span>  <span class="token keyword">interface</span> <span class="token class-name">ThrowingRunnable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">E</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>clear</code>：清空缓存中的所有条目；</li><li><code>size</code>：返回当前缓存中的条目数量；</li><li><code>withCacheLock</code>：在加锁的上下文中执行用户自定义逻辑，确保操作的线程安全；</li></ul><p>在&nbsp;<code>EntityCache</code>&nbsp;中引入&nbsp;<code>withCacheLock</code>&nbsp;的主要目的是为了提供一个加锁的操作环境，以保证<strong>缓存整体操作的原子性和一致性</strong>。</p><p>缓存内部包含两个核心组件：</p><ul><li><code>CacheIndex</code>：用于前缀或关联索引检索；</li><li><code>CacheData</code>：用于实际的数据存储。</li></ul><p>Cache 作为一个整体需要通过锁保证内部 CacheIndex 和 CacheData 两个部分的一致性。在执行涉及多个步骤的复合操作（如更新、清理、加载）时，需要保证这两个部分的数据在任意时刻保持一致，否则可能出现缓存脏读或状态不一致的问题。</p><p>尤其在&nbsp;<strong>Store 层</strong>&nbsp;的典型操作场景中，如&nbsp;<code>update</code>&nbsp;操作，通常包括以下流程：</p><ol><li><strong>清理缓存</strong>（防止旧数据被访问）；</li><li><strong>更新底层存储系统</strong>（如数据库或 Catalog）；</li><li><strong>将更新后的实体重新放入缓存</strong>。</li></ol><p>为了保证这三个步骤作为一个整体执行时不会被其他线程打断，必须在整个流程上加锁，而不能仅依赖&nbsp;<code>put</code>、<code>invalidate</code>&nbsp;等单个方法内部的锁控制。</p><p>因此，<code>withCacheLock</code>&nbsp;提供了一种显式的加锁机制，使得调用方可以在<strong>一个加锁的上下文中自定义一组操作</strong>，确保它们具备原子性和线程安全性。</p><p><code>ThrowingSupplier</code> 接口是对标准 Java&nbsp;<code>Supplier&lt;T&gt;</code>&nbsp;的扩展，支持在&nbsp;<code>get()</code>&nbsp;方法中抛出受检异常（<code>checked exception</code>）。其设计目的是用于在带返回值的延迟执行逻辑中，允许调用方在执行过程中处理和传播异常。这使得在 Lambda 表达式中处理数据库或 IO 操作等异常源时，更灵活，同时提升了&nbsp;<code>withCacheLock</code>&nbsp;方法的通用性和表达能力。</p><p><code>ThrowingRunnable</code> 接口是对标准 Java&nbsp;<code>Runnable</code>&nbsp;的扩展，支持在&nbsp;<code>run()</code>&nbsp;方法中抛出受检异常。它主要用于执行无返回值但可能抛出异常的操作逻辑。其设计逻辑同 <code>ThrowingSupplier</code>。</p><p>这两个接口作为&nbsp;<code>EntityCache</code>&nbsp;的加锁执行接口参数，提供了对缓存操作原子性保护的同时，也允许业务逻辑自由处理受检异常。</p><h3 id="键值设计"><a class="markdownIt-Anchor" href="#键值设计"></a> 键值设计</h3><h4 id="entitycachekey"><a class="markdownIt-Anchor" href="#entitycachekey"></a> EntityCacheKey</h4><p><code>EntityCacheKey</code>&nbsp;是缓存中用于唯一标识实体或实体关系的键对象，其设计来源于对&nbsp;<code>EntityCache</code>&nbsp;接口中两类操作的抽象：<br>对于&nbsp;<code>SupportsEntityStoreCache</code>&nbsp;接口，可以如下方式映射唯一的 Entity 对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">NameIdentifier</span> <span class="token operator">+</span> <span class="token class-name">Entity<span class="token punctuation">.</span>EntityType</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于&nbsp;<code>SupportsRelationEntityCache</code>&nbsp;接口，可以如下方式映射唯一的一组 Entity 对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">NameIdentifier</span> <span class="token operator">+</span> <span class="token class-name">Entity<span class="token punctuation">.</span>EntityType</span> <span class="token operator">+</span> <span class="token class-name">SupportsRelationOperations<span class="token punctuation">.</span>Type</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此，<code>EntityCacheKey</code>&nbsp;包含以下三个核心字段：</p><ul><li><code>NameIdentifier identifier</code>：实体的命名标识；</li><li><code>Entity.EntityType type</code>：实体的类型；</li><li><code>SupportsRelationOperations.Type relationType</code>：关系类型（可选，用于关系缓存）。</li></ul><p><code>EntityCacheKey</code>&nbsp;的&nbsp;<code>toString()</code>&nbsp;方法定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> stringExpr <span class="token operator">=</span> identifier<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> type<span class="token punctuation">.</span><span class="token function">getShortName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>relationType <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      stringExpr <span class="token operator">+=</span> <span class="token string">":"</span> <span class="token operator">+</span> relationType<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">return</span> stringExpr<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现采用&nbsp;<code>identifier</code>&nbsp;作为字符串前缀，并追加类型与关系信息，从而保证键的唯一性和可读性。同时具备良好的前缀结构，有利于基于前缀的索引与检索操作（如在&nbsp;<code>ConcurrentRadixTree</code>&nbsp;中进行快速范围查询）。</p><h4 id="entitycachevalue"><a class="markdownIt-Anchor" href="#entitycachevalue"></a> EntityCacheValue</h4><p>根据上述设计，缓存中的 Value 可以被统一抽象为一组&nbsp;<code>Entity</code>&nbsp;实例（<code>List&lt;Entity&gt;</code>），且每组至少包含一个元素。无论是单个实体缓存（如 Catalog、Table），还是关系型缓存（如 Role → Users 的映射），都可统一表示为一组相关联的&nbsp;<code>Entity</code>&nbsp;对象。这种抽象方式简化了缓存结构的处理，便于在内部统一管理、清理和加载缓存项。</p><h3 id="cache-实现"><a class="markdownIt-Anchor" href="#cache-实现"></a> Cache 实现</h3><h4 id="baseentitycache"><a class="markdownIt-Anchor" href="#baseentitycache"></a> BaseEntityCache</h4><p><code>BaseEntityCache</code>&nbsp;是一个抽象基类，用于实现&nbsp;<code>EntityCache</code>&nbsp;接口的通用逻辑。它主要负责一些缓存通用逻辑的封装和工具方法，并将核心的缓存驱逐实现（如&nbsp;<code>invalidateExpiredItem</code>）留给子类完成。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseEntityCache</span> <span class="token keyword">implements</span> <span class="token class-name">EntityCache</span> <span class="token punctuation">{</span> <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Config</span> cacheConfig<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>核心字段是 <code>cacheConfig</code> 保存缓存的配置参数，并通过构造函数注入，确保不会为 null（使用&nbsp;<code>Preconditions</code>&nbsp;校验）。</p><p>除此之外，<code>BaseEntityCache</code> 还提供了多个静态工具方法供子类复用</p><ul><li><code>getIdentFromEntity (Entity entity)</code>：安全地从 Entity 类型获取其 NameIdentifier；</li><li><code>validateEntityHasIdentifier (Entity entity)</code>：校验&nbsp;<code>Entity</code>&nbsp;是否实现了&nbsp;<code>HasIdentifier</code>&nbsp;接口；</li><li><code>convertEntities (List&lt;Entity&gt; entities)</code>：将原始&nbsp;<code>Entity</code>&nbsp;列表安全转换为指定泛型类型的实体列表；</li><li><code>convertEntity (Entity entity)</code>：与上面方法类似，针对单个实体进行泛型转换。</li></ul><p>此外，<code>BaseEntityCache</code> 还提供了 <code>invalidateExpiredItem (EntityCacheKey key)</code> 方法，该方法用于异步驱逐或过期清理逻辑。</p><h4 id="caffeineentitycache"><a class="markdownIt-Anchor" href="#caffeineentitycache"></a> CaffeineEntityCache</h4><p>CaffeineEntityCache 实现类采用 Caffeine 实现。下面是 CacheData 和 CacheIndex 的示意图：</p><p><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/yuque_diagram20250619-1.png" alt="CaffeineEntityCache"></p><p><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/yuque_diagram20250619-2.png" alt="CaffeineEntityCache Key"></p><ul><li>CacheData：<code>EntityCacheKey</code> → <code>List&lt;Entity&gt;</code></li><li>CacheIndex：PrefixTree&lt;String, EntityKey&gt;<br>索引结构选型</li></ul><blockquote><p>GitHub:&nbsp;<a href="https://github.com/npgall/concurrent-trees">https://github.com/npgall/concurrent-trees</a></p></blockquote><p><code>ConcurrentRadixTree</code>（来自 concurrent-trees）</p><ul><li>线程安全，支持前缀查询、模糊匹配、高性能读写。</li><li>读取无锁，更新以 patch 方式应用，避免不一致状态。</li><li>使用节点级锁代替全树锁，提高并发写入能力。</li><li>空间效率高，采用路径压缩减少节点数量，提升缓存局部性。</li></ul><p><code>PatriciaTrie</code>（来自 commons-collections）</p><ul><li>非线程安全，写入需锁全树，影响读写性能。</li><li>并发场景下易成为瓶颈。</li></ul><p>与&nbsp;<code>PatriciaTrie</code>&nbsp;相比，<code>ConcurrentRadixTree</code>&nbsp;具有以下关键优势：</p><ol><li><strong>无锁／读写分离：</strong><code>ConcurrentRadixTree</code>&nbsp;在读操作方面实现了 “近乎无锁” 的特性。读线程无需竞争锁，就能安全地遍历树结构。对于写操作，它会将更改内容打包成一个 “补丁”（patch），并以原子方式进行应用。这确保了读者要么看到补丁应用前的旧版本，要么看到补丁应用后的新版本，始终能获得一致的数据视图。这种设计在高并发场景下，能够显著减少读写冲突，有效降低操作延迟。</li><li><strong>细粒度并发控制：</strong><code>ConcurrentRadixTree</code>&nbsp;内部采用分段或节点级别的锁来控制写入操作，避免了像使用&nbsp;<code>synchronized</code>&nbsp;对整个表加锁那样导致所有操作被阻塞的情况。在进行写入操作时，仅对受影响的子树或节点加锁，而其他分支仍可同时进行读写操作，从而提高了并发性能。</li><li><strong>原生前缀／通配符查询：</strong><code>ConcurrentRadixTree</code>&nbsp;支持多种高效的查询方式，包括前缀查找、精确查找，还具备关键词扫描功能（<code>ConcurrentInvertedRadixTree</code>）。这些查询操作的时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O (m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span> ，m 为查询长度，借助路径压缩后的树结构，在查询过程中访问的节点数量更少，查询速度可与哈希表相媲美。</li><li><strong>内存紧凑＋快速路径压缩</strong>：相较于普通的 Trie 树，Radix Tree 能够将只有一个子节点的链路进行合并，从而减少树的深度和节点数量。这种优化不仅提高了内存利用率，还提升了缓存命中率，使数据访问更加高效。</li></ol><p>get 操作</p><p>get 操作比较简单，如果命中缓存则返回 <code>Optional&lt;T&gt;</code> 否则返回 <code>Optional. EMPTY</code>；</p><p>put 操作</p><p><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/20250623-1.png" alt="Put 操作"></p><p>invalidate 操作</p><p>首先通过前缀树检索待删除对象的&nbsp;<code>NameIdentifier</code>&nbsp;和 ID，再依次删除数据缓存与索引缓存，确保一致性。</p><p><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/InvalidateOP.png" alt="Invalidate 操作"></p><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><p>测试使用的 Entity 实体；</p><p><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/20250530155033.png" alt="测试使用的 Entity"></p><h3 id="ut-测试"><a class="markdownIt-Anchor" href="#ut-测试"></a> UT 测试</h3><table><thead><tr><th><strong>Category</strong></th><th><strong>Test Case Description</strong></th><th><strong>Method (s)</strong></th></tr></thead><tbody><tr><td><strong>Basic Functionality</strong></td><td>Basic put/get/getIfPresent operations</td><td><code>testPutAndGet</code>, <code>testGetIfPresent</code></td></tr><tr><td></td><td>Same identifier with different entity types</td><td><code>testPutSameIdentifierEntities</code></td></tr><tr><td></td><td>Size counting</td><td><code>testSize</code></td></tr><tr><td></td><td>Clear the cache</td><td><code>testClear</code></td></tr><tr><td><strong>Invalidation</strong></td><td>Invalidate by METALAKE/CATALOG/SCHEMA/TABLE level</td><td><code>testInvalidateMetalake</code>, <code>testInvalidateCatalog</code>, <code>testInvalidateSchema</code>, <code>testInvalidateTable</code></td></tr><tr><td></td><td>Invalidate non-existent entity</td><td><code>testRemoveNonExistentEntity</code></td></tr><tr><td><strong>Relation Handling</strong></td><td>Put/Get/Invalidate entity relations</td><td>Covered in multiple tests (e.g., <code>testPutAndGet</code>, <code>testGetIfPresent</code>)</td></tr><tr><td><strong>Eviction Policies</strong></td><td>Expire by time</td><td><code>testExpireByTime</code></td></tr><tr><td></td><td>Expire by weight</td><td><code>testExpireByWeight</code></td></tr><tr><td></td><td>Exceed max weight immediately</td><td><code>testExpireByWeightExceedMaxWeight</code></td></tr><tr><td></td><td>Expire by size</td><td><code>testExpireBySize</code></td></tr><tr><td><strong>Weight Logic</strong></td><td>Correctness of entity weight calculation</td><td><code>testWeightCalculation</code></td></tr><tr><td><strong>Error &amp; Boundary</strong></td><td>Null argument checks</td><td><code>testGetIfPresentWithNull</code>, <code>testContainsWithNull</code>, <code>testInvalidateWithNull</code>, <code>testPutWithNull</code></td></tr></tbody></table><h3 id="多线程一致性测试"><a class="markdownIt-Anchor" href="#多线程一致性测试"></a> 多线程一致性测试</h3><p>测试采用 JCStress 框架，主要目的是验证&nbsp;<code>CaffeineEntityCache</code>&nbsp;在多线程高并发场景下的可见性和一致性。相比传统的单线程或 JUnit-based 多线程测试，JCStress 更适合挖掘在 JMM（Java Memory Model）层级上的竞态问题。</p><table><thead><tr><th>Test Case</th><th>Scenario</th><th>Expected Outcome (s)</th><th>Unexpected Outcome (s)</th><th>Description</th></tr></thead><tbody><tr><td>PutWithGetIfPresentCoherenceTest</td><td>put vs getIfPresent</td><td>ENTITY</td><td>NULL</td><td>getIfPresent should always see the entity after put.</td></tr><tr><td>PutWithContainCoherenceTest</td><td>put vs contains</td><td>ENTITY</td><td>NULL</td><td>contains should return true after repeated put.</td></tr><tr><td>PutWithInvalidateCoherenceTest</td><td>put vs invalidate</td><td>ENTITY</td><td>NULL</td><td>Race: either put or invalidate wins, both acceptable.</td></tr><tr><td>PutWithClearCoherenceTest</td><td>put vs clear</td><td>ENTITY</td><td>NULL</td><td>Race: either put or clear wins, both acceptable.</td></tr><tr><td>ConcurrentPutDifferentKeysTest</td><td>concurrent put (different keys)</td><td>2</td><td>1 or 0</td><td>Both entities should be visible; lower count indicates visibility issue.</td></tr><tr><td>ConcurrentPutDifferentKeysWithRelationTest</td><td>concurrent put (diff rel keys)</td><td>2</td><td>1 or 0</td><td>Both relation entries should be visible.</td></tr><tr><td>ConcurrentPutSameKeyTest</td><td>concurrent put (same key)</td><td>1</td><td>0</td><td>Value should remain visible after concurrent put.</td></tr><tr><td>ConcurrentPutSameKeyWithRelationTest</td><td>concurrent put (same key with rel)</td><td>1</td><td>0</td><td>Relation value should remain visible.</td></tr><tr><td>InvalidateWithGetCoherenceTest</td><td>invalidate vs getIfPresent</td><td>ENTITY</td><td>NULL</td><td>Race: get may or may not see the entity.</td></tr><tr><td>ConcurrentInvalidateSameKeyCoherenceTest</td><td>invalidate x2 (same key)</td><td>SUCCESS</td><td>FAILURE</td><td>Idempotent invalidate should remove key safely.</td></tr><tr><td>ConcurrentInvalidateRelatedKeyCoherenceTest</td><td>invalidate x2 (related keys)</td><td>SUCCESS</td><td>FAILURE</td><td>Both keys should be removed safely.</td></tr><tr><td>ClearWithInvalidateCoherenceTest</td><td>clear vs invalidate</td><td>SUCCESS</td><td>FAILURE</td><td>All keys should be removed; no residue expected.</td></tr></tbody></table><p>测试结果如下：<br><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/20250619232746.png" alt="JCStress 测试结果"></p><h3 id="性能测试"><a class="markdownIt-Anchor" href="#性能测试"></a> 性能测试</h3><p>Cache 的性能测试采用 JMH 框架，JMH（Java Microbenchmark Harness）是由 OpenJDK 团队开发的一个基准测试框架，用于构建、运行和分析精确的 Java 微基准测试。它专为测量细粒度操作的性能而设计，例如方法调用、缓存访问或对象分配等，这些操作的性能测量对精度要求极高，毫秒级的精度已无法满足需求。</p><p>测试使用的配置如下：</p><ul><li>CPU: Apple M2 Pro</li><li>Memory: 16 GB</li><li>OS: macOS Ventura 15.5</li><li>JVM: openjdk version “17.0.15”</li><li>JMH Version: 1.37</li><li>Benchmark Config:<ul><li><code>@BenchmarkMode</code>: Throughput &amp; AverageTime</li><li><code>@State</code>: Scope.Thread</li><li><code>@Fork</code>: 1</li><li><code>@Warmup</code>: 5 iterations</li><li><code>@Measurement</code>: 10 iterations</li></ul></li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">Benchmark                                                   (totalCnt)   Mode  Cnt         Score         Error  UnitsEntityCacheClearBenchmark.benchmarkClear                            10  thrpt   10    536704.823 ±   36351.106  ops/sEntityCacheClearBenchmark.benchmarkClear                           100  thrpt   10     89391.338 ±    4692.738  ops/sEntityCacheClearBenchmark.benchmarkClear                          1000  thrpt   10      8406.573 ±     738.173  ops/sEntityCacheContainsBenchmark.benchmarkContains                      10  thrpt   10  19008727.286 ± 1172892.696  ops/sEntityCacheContainsBenchmark.benchmarkContains                     100  thrpt   10  19129605.626 ±  928728.148  ops/sEntityCacheContainsBenchmark.benchmarkContains                    1000  thrpt   10  17954917.808 ±  916939.288  ops/sEntityCacheContainsBenchmark.benchmarkContainsWithRelation          10  thrpt   10   9454829.072 ±  403482.020  ops/sEntityCacheContainsBenchmark.benchmarkContainsWithRelation         100  thrpt   10   5910924.166 ±  234228.471  ops/sEntityCacheContainsBenchmark.benchmarkContainsWithRelation        1000  thrpt   10   1021172.939 ±  188152.980  ops/sEntityCacheGetBenchmark.benchmarkGet                                10  thrpt   10  17646662.661 ± 1850512.796  ops/sEntityCacheGetBenchmark.benchmarkGet                               100  thrpt   10  17906401.139 ±  905521.957  ops/sEntityCacheGetBenchmark.benchmarkGet                              1000  thrpt   10  17882451.612 ± 1013749.411  ops/sEntityCacheGetBenchmark.benchmarkGetWithRelations                   10  thrpt   10   7949607.041 ±  323537.818  ops/sEntityCacheGetBenchmark.benchmarkGetWithRelations                  100  thrpt   10   4939219.694 ±   54283.320  ops/sEntityCacheGetBenchmark.benchmarkGetWithRelations                 1000  thrpt   10   1060788.506 ±   22922.363  ops/sEntityCacheInvalidateBenchmark.benchmarkInvalidate                  10  thrpt   10    184227.751 ±    6303.043  ops/sEntityCacheInvalidateBenchmark.benchmarkInvalidate                 100  thrpt   10     19663.536 ±     684.142  ops/sEntityCacheInvalidateBenchmark.benchmarkInvalidate                1000  thrpt   10      1651.429 ±     213.587  ops/sEntityCachePutBenchmark.benchmarkPut                                10  thrpt   10    222207.294 ±   10992.713  ops/sEntityCachePutBenchmark.benchmarkPut                               100  thrpt   10     20128.455 ±     434.551  ops/sEntityCachePutBenchmark.benchmarkPut                              1000  thrpt   10      1902.510 ±      75.715  ops/sEntityCachePutBenchmark.benchmarkPutWithRelation                    10  thrpt   10    335683.335 ±   34641.231  ops/sEntityCachePutBenchmark.benchmarkPutWithRelation                   100  thrpt   10     26415.590 ±    1511.666  ops/sEntityCachePutBenchmark.benchmarkPutWithRelation                  1000  thrpt   10      2345.904 ±      89.693  ops/sEntityCacheSizeBenchmark.entityCacheSize                            10  thrpt   10   9416189.995 ± 1018247.698  ops/sEntityCacheSizeBenchmark.entityCacheSize                           100  thrpt   10    944383.407 ±   35235.930  ops/sEntityCacheSizeBenchmark.entityCacheSize                          1000  thrpt   10     79938.016 ±    2466.431  ops/sEntityCacheClearBenchmark.benchmarkClear                            10   avgt   10        ≈ 10⁻⁵                 s/opEntityCacheClearBenchmark.benchmarkClear                           100   avgt   10        ≈ 10⁻⁴                 s/opEntityCacheClearBenchmark.benchmarkClear                          1000   avgt   10        ≈ 10⁻³                 s/opEntityCacheContainsBenchmark.benchmarkContains                      10   avgt   10        ≈ 10⁻⁷                 s/opEntityCacheContainsBenchmark.benchmarkContains                     100   avgt   10        ≈ 10⁻⁷                 s/opEntityCacheContainsBenchmark.benchmarkContains                    1000   avgt   10        ≈ 10⁻⁷                 s/opEntityCacheContainsBenchmark.benchmarkContainsWithRelation          10   avgt   10        ≈ 10⁻⁶                 s/opEntityCacheContainsBenchmark.benchmarkContainsWithRelation         100   avgt   10        ≈ 10⁻⁶                 s/opEntityCacheContainsBenchmark.benchmarkContainsWithRelation        1000   avgt   10        ≈ 10⁻⁵                 s/opEntityCacheGetBenchmark.benchmarkGet                                10   avgt   10        ≈ 10⁻⁷                 s/opEntityCacheGetBenchmark.benchmarkGet                               100   avgt   10        ≈ 10⁻⁷                 s/opEntityCacheGetBenchmark.benchmarkGet                              1000   avgt   10        ≈ 10⁻⁷                 s/opEntityCacheGetBenchmark.benchmarkGetWithRelations                   10   avgt   10        ≈ 10⁻⁶                 s/opEntityCacheGetBenchmark.benchmarkGetWithRelations                  100   avgt   10        ≈ 10⁻⁶                 s/opEntityCacheGetBenchmark.benchmarkGetWithRelations                 1000   avgt   10        ≈ 10⁻⁵                 s/opEntityCacheInvalidateBenchmark.benchmarkInvalidate                  10   avgt   10        ≈ 10⁻⁵                 s/opEntityCacheInvalidateBenchmark.benchmarkInvalidate                 100   avgt   10        ≈ 10⁻⁴                 s/opEntityCacheInvalidateBenchmark.benchmarkInvalidate                1000   avgt   10         0.002 ±       0.001   s/opEntityCachePutBenchmark.benchmarkPut                                10   avgt   10        ≈ 10⁻⁵                 s/opEntityCachePutBenchmark.benchmarkPut                               100   avgt   10        ≈ 10⁻⁴                 s/opEntityCachePutBenchmark.benchmarkPut                              1000   avgt   10         0.002 ±       0.001   s/opEntityCachePutBenchmark.benchmarkPutWithRelation                    10   avgt   10        ≈ 10⁻⁵                 s/opEntityCachePutBenchmark.benchmarkPutWithRelation                   100   avgt   10        ≈ 10⁻⁴                 s/opEntityCachePutBenchmark.benchmarkPutWithRelation                  1000   avgt   10         0.002 ±       0.001   s/opEntityCacheSizeBenchmark.entityCacheSize                            10   avgt   10        ≈ 10⁻⁶                 s/opEntityCacheSizeBenchmark.entityCacheSize                           100   avgt   10        ≈ 10⁻⁵                 s/opEntityCacheSizeBenchmark.entityCacheSize                          1000   avgt   10        ≈ 10⁻⁴                 s/op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>操作复杂度总结如下：</p><table><thead><tr><th>操作类型</th><th>时间复杂度</th><th>说明</th></tr></thead><tbody><tr><td><code>contains</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>常量时间的键查找</td></tr><tr><td><code>get</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>基于键的直接读取操作</td></tr><tr><td><code>getWithRel</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>K</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(K)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span></span></span></span></td><td>缓存查找为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ，但列表转换过程带来 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>K</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(K)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span></span></span></span> 的线性开销</td></tr><tr><td><code>put</code></td><td>每条 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> → 总体 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></td><td>不支持批量写入，需遍历插入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> 条记录</td></tr><tr><td><code>putWithRel</code></td><td>每条关系 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> → 总体 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></td><td>每个关联列表单独写入</td></tr><tr><td><code>invalidate</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></td><td>逐条或按组清除缓存项</td></tr><tr><td><code>clear</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></td><td>对所有缓存项进行线性遍历清除</td></tr><tr><td><code>size()</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></td><td>需扫描所有缓存项以精确计算大小</td></tr></tbody></table><p>尽管&nbsp;<code>getWithRel()</code>&nbsp;操作本身通过键查找缓存是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ，但其主要开销在于将缓存中的&nbsp;<code>List&lt;Entity&gt;</code>&nbsp;转换为特定类型的&nbsp;<code>List&lt;E&gt;</code>。</p><p>这个转换过程包括：</p><ul><li>遍历缓存列表中的所有元素；</li><li>对每个&nbsp;<code>Entity</code>&nbsp;进行类型校验和强制类型转换为预期的泛型类型&nbsp;<code>E</code>。</li></ul><p>因此，该操作的总体时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>K</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(K)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span> 是单个缓存键下关联实体的数量。随着关联实体数量的增加，这一成本也将线性增长。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gravitino </tag>
            
            <tag> big-data </tag>
            
            <tag> metadata </tag>
            
            <tag> open-source </tag>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025-07-01  小记</title>
      <link href="/2025/07/01/diarly/2025-07-01-diary/"/>
      <url>/2025/07/01/diarly/2025-07-01-diary/</url>
      
        <content type="html"><![CDATA[<h2 id="人生感悟"><a class="markdownIt-Anchor" href="#人生感悟"></a> 人生感悟</h2><p>给 2025 年的自己立几个人生的小目标</p><ol><li>成为一个更健康的人：将体重控制在 82kg 左右，体脂率降至 20% 以下，养成长期可持续的饮食习惯与运动规律，建立稳定的健康生活方式；</li><li>成为一个有深度的思考者：保持好奇心，持续阅读、思考与反思，保持输出，搭建自己的播客系统；</li><li>成为一个有影响力的人：积极参与公共事务，贡献于知识分享与开源社区，提升个人影响力与社会参与感；</li><li>成为一个更有能力的人：不断精进多元技能，包括体育、语言、财务与项目管理等，提升应对复杂问题的综合能力。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日记随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 2025目标 </tag>
            
            <tag> 深度思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gravitino事件系统设计</title>
      <link href="/2025/06/19/gravitino/2025-06-19-gravitino-eventsystem/"/>
      <url>/2025/06/19/gravitino/2025-06-19-gravitino-eventsystem/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><p>为提升&nbsp;<strong>Gravitino 的扩展性</strong>，引入了<strong>可插拔的事件监听系统</strong>，允许用户在 Gravitino 的操作后挂载自定义逻辑。典型使用场景包括：</p><ul><li>日志审计；</li><li>向其他 Catalog 进行双写；</li></ul><h2 id="设计目标"><a class="markdownIt-Anchor" href="#设计目标"></a> 设计目标</h2><ul><li>支持在&nbsp;<strong>Gravitino 服务</strong>&nbsp;与&nbsp;<strong>Iceberg REST Catalog 服务</strong>&nbsp;中统一接入事件监听机制</li><li>支持可插拔插件体系，方便第三方自定义事件处理逻辑</li></ul><p>不支持</p><ul><li><strong>强一致性的权限控制</strong>（如精细化授权）不作为目标</li><li><strong>事件监听器内部异常处理</strong>（如线程阻塞、挂起）交由调用方自行管理</li><li><strong>权限校验</strong>在 HTTP Handler 层完成，不由事件机制承担</li><li>该机制<strong>不用于 Gravitino 内部模块之间的通信</strong></li></ul><h2 id="具体设计"><a class="markdownIt-Anchor" href="#具体设计"></a> 具体设计</h2><p>提供 hook 点，在 Gravitino 操作完成后触发事件。事件可以同步或异步处理。</p><h3 id="用户视角"><a class="markdownIt-Anchor" href="#用户视角"></a> 用户视角</h3><h4 id="配置方式"><a class="markdownIt-Anchor" href="#配置方式"></a> 配置方式</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置一个事件监听器</span><span class="token assign-left variable">gravitino.eventListener.names</span><span class="token operator">=</span>audit<span class="token comment"># 配置多个事件监听器</span><span class="token assign-left variable">gravitino.eventListener.names</span><span class="token operator">=</span>audit,test<span class="token comment"># 监听器实现类</span>gravitino.eventListener.<span class="token punctuation">{</span>name<span class="token punctuation">}</span>.class<span class="token operator">=</span>xxxx<span class="token comment"># 用户自定义属性</span>gravitino.eventListener.<span class="token punctuation">{</span>name<span class="token punctuation">}</span>.<span class="token punctuation">{</span>key<span class="token punctuation">}</span><span class="token comment"># 配置异步队列大小</span>gravitino.eventListener.<span class="token punctuation">{</span>name<span class="token punctuation">}</span>.queueCapacity<span class="token operator">=</span><span class="token number">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="接口定义"><a class="markdownIt-Anchor" href="#接口定义"></a> 接口定义</h4><p>核心接口：<code>EventListenerPlugin</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EventListenerPlugin</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">onPostEvent</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 接收事件</span>  <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">isAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">isSharedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事件资源类型：<code>EventResourceType</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">EventResourceType</span> <span class="token punctuation">{</span>  <span class="token constant">METALAKE</span><span class="token punctuation">,</span> <span class="token constant">CATALOG</span><span class="token punctuation">,</span> <span class="token constant">RELATION</span><span class="token punctuation">,</span> <span class="token constant">FILESET</span><span class="token punctuation">,</span> <span class="token constant">ICEBERG_REST</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="实现视角"><a class="markdownIt-Anchor" href="#实现视角"></a> 实现视角</h3><p><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/20250530130828.png" alt="Implement"></p><h4 id="核心组件"><a class="markdownIt-Anchor" href="#核心组件"></a> 核心组件</h4><ul><li><strong>EventListenerManager</strong>：负责加载所有事件监听插件，并根据不同操作类型创建对应的&nbsp;<code>EventBus</code>。</li><li><strong>EventBus</strong>：管理一组功能一致的事件监听器，按照顺序将事件分发给每个监听器。支持同步与异步监听器，异步处理由&nbsp;<code>AsyncQueueListener</code>&nbsp;管理。</li><li><strong>AsyncQueueListener</strong>：通过队列机制异步消费事件。不同监听器可通过配置队列名共享消费线程，实现事件的串行或并行处理。</li></ul><h4 id="生命周期与流程"><a class="markdownIt-Anchor" href="#生命周期与流程"></a> 生命周期与流程</h4><ol><li>全局唯一的&nbsp;<code>EventListenerManager</code></li><li>加载监听器插件</li><li>创建对应的&nbsp;<code>AsyncQueueListener</code>&nbsp;实例</li><li>为每种 HTTP 操作构建并注册&nbsp;<code>EventBus</code>&nbsp;实例，绑定监听器集合</li></ol><h4 id="设计考量"><a class="markdownIt-Anchor" href="#设计考量"></a> 设计考量</h4><p>接口粒度</p><p>方案一：统一处理事件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuditLogEventListenerPlugin</span> <span class="token keyword">implements</span> <span class="token class-name">EventListenerPlugin</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPostEvent</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 从 event 中提取审计信息并写入日志</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>优势</strong>：适合通用逻辑，插件逻辑集中；</li><li><strong>劣势</strong>：对每个事件都需要解析字段，不够明确</li></ul><p>方案二：细分回调接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuditLogEventListenerPlugin</span> <span class="token keyword">implements</span> <span class="token class-name">RelationalEventListener</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">onTableCreate</span><span class="token punctuation">(</span><span class="token class-name">NameIdentifier</span> id<span class="token punctuation">,</span> <span class="token class-name">OperationResult</span> result<span class="token punctuation">,</span> <span class="token class-name">Table</span> table<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 写审计日志</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>优势</strong>：更直观清晰</li><li><strong>劣势</strong>：每个事件都需要写独立方法，代码重复</li></ul><table><thead><tr><th>模式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>同步</td><td>不丢事件</td><td>阻塞主流程</td></tr><tr><td>异步</td><td>不阻塞主流程</td><td>可能丢事件</td></tr></tbody></table><p>同时支持同步和异步，由插件本身决定</p><p>是否支持类加载隔离</p><p><strong>支持更好</strong>，否则所有插件只能放在 Gravitino 的 classpath 中，可能冲突。</p><h3 id="dispatcher-视角"><a class="markdownIt-Anchor" href="#dispatcher-视角"></a> Dispatcher 视角</h3><p><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/20250530130843.png" alt="Dispatcher"></p><p>Gravitino 的 Catalog 实现采用了经典的<strong>装饰器模式（Decorator Pattern）</strong>。在该模式下，所有组件均实现相同的接口（或继承统一的抽象类），通过<strong>包装已有对象</strong>的方式，在不修改其原有逻辑的前提下，增强其功能。</p><p>以&nbsp;<code>ModelEventDispatcher</code>&nbsp;为例，它并不直接处理具体的 Catalog 操作，而是<strong>包装一个实际的 Dispatcher 实例</strong>。核心职责如下：</p><ul><li>将操作委托给被包装的底层 Dispatcher；</li><li>在委托执行前后插入自定义逻辑，如触发事件系统、发布事件等。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelEventDispatcher</span> <span class="token keyword">implements</span> <span class="token class-name">ModelDispatcher</span> <span class="token punctuation">{</span>  <span class="token comment">// 构造的时候传递 EventBus 实例以及 ModelDispatcher 实现类</span>  <span class="token keyword">public</span> <span class="token class-name">ModelEventDispatcher</span><span class="token punctuation">(</span><span class="token class-name">EventBus</span> eventBus<span class="token punctuation">,</span> <span class="token class-name">ModelDispatcher</span> dispatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus <span class="token operator">=</span> eventBus<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dispatcher <span class="token operator">=</span> dispatcher<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token comment">// 使用 eventBus.dispatchEvent 发送事件 -&gt; eventBus.dispatchPostEvent -&gt; 触发每个 Plugin 的 onPostEvent 进行处理</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Model</span> <span class="token function">registerModel</span><span class="token punctuation">(</span><span class="token class-name">NameIdentifier</span> ident<span class="token punctuation">,</span> <span class="token class-name">String</span> comment<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> properties<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">NoSuchSchemaException</span><span class="token punctuation">,</span> <span class="token class-name">ModelAlreadyExistsException</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> user <span class="token operator">=</span> <span class="token class-name">PrincipalUtils</span><span class="token punctuation">.</span><span class="token function">getCurrentUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ModelInfo</span> registerRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelInfo</span><span class="token punctuation">(</span>ident<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">,</span> comment<span class="token punctuation">)</span><span class="token punctuation">;</span>    eventBus<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegisterModelPreEvent</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> ident<span class="token punctuation">,</span> registerRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token class-name">Model</span> model <span class="token operator">=</span> dispatcher<span class="token punctuation">.</span><span class="token function">registerModel</span><span class="token punctuation">(</span>ident<span class="token punctuation">,</span> comment<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">ModelInfo</span> registeredModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelInfo</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>      eventBus<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegisterModelEvent</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> ident<span class="token punctuation">,</span> registeredModel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> model<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      eventBus<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegisterModelFailureEvent</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> ident<span class="token punctuation">,</span> e<span class="token punctuation">,</span> registerRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><p><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/20250530130927.png" alt="EventBus"></p><h2 id="监听器"><a class="markdownIt-Anchor" href="#监听器"></a> 监听器</h2><p>监听器的接口是 <code>EventListenerPlugin</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DeveloperApi</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EventListenerPlugin</span> <span class="token punctuation">{</span> <span class="token keyword">enum</span> <span class="token class-name">Mode</span> <span class="token punctuation">{</span>    <span class="token constant">SYNC</span><span class="token punctuation">,</span>    <span class="token constant">ASYNC_ISOLATED</span><span class="token punctuation">,</span>    <span class="token constant">ASYNC_SHARED</span>  <span class="token punctuation">}</span>   <span class="token comment">// 初始化方法，初始化插件，用于加载配置、连接资源等</span> <span class="token comment">// 和服务器一起启动，如果插件启动失败，则会导致服务器启动失败</span>  <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> properties<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">;</span>    <span class="token comment">// 插件启动阶段，表示插件准备好开始处理事件</span>  <span class="token comment">// 启动失败，依然会导致服务器启动失败</span>  <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">;</span>    <span class="token comment">// 停止该插件，异常不会影响主流程，但建议清理资源以防泄漏</span>  <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">;</span>    <span class="token comment">// 处理操作执行前的事件（如校验、拒绝等）</span>  <span class="token comment">// 如果抛出 ForbiddenException 且模式为 SYNC，主操作将被跳过</span> <span class="token comment">// 在 ASYNC 模式下抛出异常无效，只记录日志</span> <span class="token comment">// 允许修改事件中的资源（如动态修改参数）</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">onPreEvent</span><span class="token punctuation">(</span><span class="token class-name">PreEvent</span> preEvent<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ForbiddenException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// 处理操作完成后的事件（如创建表后触发）</span> <span class="token comment">// 默认实现为空，只读事件，不能改变资源</span> <span class="token comment">// 可同步或异步执行（由 mode() 决定）</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">onPostEvent</span><span class="token punctuation">(</span><span class="token class-name">Event</span> postEvent<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// 该监听器的事件处理模式</span>  <span class="token comment">// 默认使用同步</span>  <span class="token keyword">default</span> <span class="token class-name">Mode</span> <span class="token function">mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Mode</span><span class="token punctuation">.</span><span class="token constant">SYNC</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>模式</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td><code>SYNC</code></td><td>同步执行，阻塞主线程</td><td>拒绝请求、写审计、修改事件资源</td></tr><tr><td><code>ASYNC_ISOLATED</code></td><td>异步执行，每个监听器独立队列</td><td>各监听器资源隔离，处理较复杂</td></tr><tr><td><code>ASYNC_SHARED</code></td><td>异步执行，监听器共享队列</td><td>多监听器共享线程，资源高效</td></tr></tbody></table><h3 id="eventbus"><a class="markdownIt-Anchor" href="#eventbus"></a> EventBus</h3><p>核心字段</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 存储所有注册的事件监听器实例</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventListenerPlugin</span><span class="token punctuation">&gt;</span></span> eventListeners<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>核心方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventBus</span> <span class="token punctuation">{</span>  <span class="token comment">// 发送 PreEvent 或者 Event</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token class-name">BaseEvent</span> baseEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>baseEvent <span class="token keyword">instanceof</span> <span class="token class-name">PreEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">dispatchPreEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PreEvent</span><span class="token punctuation">)</span> baseEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>baseEvent <span class="token keyword">instanceof</span> <span class="token class-name">Event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">dispatchPostEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Event</span><span class="token punctuation">)</span> baseEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Unknown event type:"</span> <span class="token operator">+</span> baseEvent<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 发送 PostEvent</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dispatchPostEvent</span><span class="token punctuation">(</span><span class="token class-name">Event</span> postEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    eventListeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>eventListener <span class="token operator">-&gt;</span> eventListener<span class="token punctuation">.</span><span class="token function">onPostEvent</span><span class="token punctuation">(</span>postEvent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token comment">// 发送 PreEvent</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dispatchPreEvent</span><span class="token punctuation">(</span><span class="token class-name">PreEvent</span> preEvent<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ForbiddenException</span> <span class="token punctuation">{</span>    eventListeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>eventListener <span class="token operator">-&gt;</span> eventListener<span class="token punctuation">.</span><span class="token function">onPreEvent</span><span class="token punctuation">(</span>preEvent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="eventlistenermanager"><a class="markdownIt-Anchor" href="#eventlistenermanager"></a> EventListenerManager</h3><p>根据配置加载监听器 → 包装处理（按执行模式） → 构建可用的监听器列表 → 创建&nbsp;<code>EventBus</code>&nbsp;用于事件分发。</p><p>关键字段:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 异步队列大小</span><span class="token keyword">private</span> <span class="token keyword">int</span> queueCapacity<span class="token punctuation">;</span><span class="token comment">// join 超时等待时间</span><span class="token keyword">private</span> <span class="token keyword">int</span> dispatcherJoinSeconds<span class="token punctuation">;</span><span class="token comment">// 所有处理完组装逻辑后的监听器列表</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventListenerPlugin</span><span class="token punctuation">&gt;</span></span> eventListeners<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventListenerManager</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">EventListenerConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventListenerConfig</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 默认队列大小 3000，超过队列大小则事件会被抛弃</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queueCapacity <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">EventListenerConfig</span><span class="token punctuation">.</span><span class="token constant">QUEUE_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// join 超时事件 3 秒</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dispatcherJoinSeconds <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">EventListenerConfig</span><span class="token punctuation">.</span><span class="token constant">DISPATCHER_JOIN_SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1. 解析配置 → 找出所有监听器名字（例如 audit、metrics）</span>  <span class="token comment">// 2. 加载并实例化每个监听器类，通过反射的方式构建实现类对象并调用 init 方法</span>  <span class="token comment">// 3. 包装为 EventListenerWrapper / AsyncQueueListener</span>  <span class="token comment">// 4. 根据是否是 shared queue 进行分组组装</span>  <span class="token punctuation">}</span>  <span class="token comment">//  启动所有的插件</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    eventListeners<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">-&gt;</span> listener<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 停止所有的插件</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    eventListeners<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">-&gt;</span> listener<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 根据插件模式（Mode）构建不同包装的插件实例  </span>  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventListenerPlugin</span><span class="token punctuation">&gt;</span></span> <span class="token function">assembleEventListeners</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">EventListenerPlugin</span><span class="token punctuation">&gt;</span></span> userEventListeners<span class="token punctuation">)</span>    <span class="token comment">// 使用配置的 class 字段获取类名并实例化</span>  <span class="token comment">// 调用 init(config) 初始化</span> <span class="token comment">// 如果失败，会记录日志并抛出异常阻止启动</span>  <span class="token keyword">private</span> <span class="token class-name">EventListenerPlugin</span> <span class="token function">loadUserEventListenerPlugin</span><span class="token punctuation">(</span><span class="token class-name">String</span> listenerName<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> config<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>模式</th><th>包装方式</th><th>特点</th></tr></thead><tbody><tr><td><code>SYNC</code></td><td><code>EventListenerPluginWrapper</code></td><td>同步执行，可记录 metrics、处理异常等（默认模式）</td></tr><tr><td><code>ASYNC_ISOLATED</code></td><td>单独的&nbsp;<code>AsyncQueueListener</code></td><td>每个插件独立线程/队列</td></tr><tr><td><code>ASYNC_SHARED</code></td><td>汇总后统一放入&nbsp;<code>AsyncQueueListener ("default")</code></td><td>多个插件共享线程/队列，节省资源</td></tr></tbody></table><p>注意事项</p><ul><li>所有共享模式插件会集中起来，在最后统一创建一个&nbsp;<code>AsyncQueueListener ("default")</code></li><li>所有包装后的插件都实现&nbsp;<code>EventListenerPlugin</code>，因此可统一交给&nbsp;<code>EventBus</code>&nbsp;使用</li></ul><h3 id="eventlistenerpluginwrapper"><a class="markdownIt-Anchor" href="#eventlistenerpluginwrapper"></a> EventListenerPluginWrapper</h3><p><code>EventListenerManager</code>&nbsp;在管理插件时，创建的都是&nbsp;<code>EventListenerPluginWrapper</code>&nbsp;实例，该类封装了诸如异常处理等公共逻辑。其&nbsp;<code>onPreEvent</code>&nbsp;包装方法根据 Mode 定义了不同的行为：例如在 SYNC 模式下，如果 PreEvent 抛出&nbsp;<code>ForbiddenException</code>&nbsp;异常，则会立即中断操作并抛出该异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPreEvent</span><span class="token punctuation">(</span><span class="token class-name">PreEvent</span> preEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>   userEventListener<span class="token punctuation">.</span><span class="token function">onPreEvent</span><span class="token punctuation">(</span>preEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ForbiddenException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Mode</span><span class="token punctuation">.</span><span class="token constant">SYNC</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token function">mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>       <span class="token string">"Event listener {} process pre event {} throws ForbiddenException, will skip the "</span>       <span class="token operator">+</span> <span class="token string">"operation."</span><span class="token punctuation">,</span>       listenerName<span class="token punctuation">,</span>       preEvent<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       e<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">throw</span> e<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">printExceptionInEventProcess</span><span class="token punctuation">(</span>listenerName<span class="token punctuation">,</span> preEvent<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printExceptionInEventProcess</span><span class="token punctuation">(</span>listenerName<span class="token punctuation">,</span> preEvent<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="event"><a class="markdownIt-Anchor" href="#event"></a> Event</h3><h4 id="preevent"><a class="markdownIt-Anchor" href="#preevent"></a> PreEvent</h4><p><code>PreEvent</code> 表示操作请求的前置事件。在操作正式执行前，该事件允许用户插入自定义拦截逻辑；在使用<strong>同步</strong>插件时，如果抛出&nbsp;<code>ForbiddenException</code>，则会中止当前操作。</p><h4 id="postevent"><a class="markdownIt-Anchor" href="#postevent"></a> PostEvent</h4><p><code>PostEvent</code> 表示操作成功完成后的事件。如果操作执行失败，则会生成一个&nbsp;<code>FailureEvent</code>，该事件归类为 PostEvent。PostEvent 一经生成，用户无法修改或拦截该事件。</p><h4 id="failureevent"><a class="markdownIt-Anchor" href="#failureevent"></a> FailureEvent</h4><p>FailureEvent 用于表示操作执行失败的情况。它记录了导致错误的原因以及其他相关信息，以便后续进行错误分析与处理。</p><h3 id="dummyeventlistener"><a class="markdownIt-Anchor" href="#dummyeventlistener"></a> DummyEventListener</h3><p>该类用于测试，是&nbsp;<code>EventListenerPlugin</code>&nbsp;接口的一种实现。它分别使用两个&nbsp;<code>LinkedList</code>&nbsp;来存储&nbsp;<code>PostEvent</code>&nbsp;和&nbsp;<code>PreEvent</code>&nbsp;事件。之所以采用&nbsp;<code>LinkedList</code>，是因为需要使用&nbsp;<code>removeLast ()</code>&nbsp;方法弹出队列末尾的事件，而该位置存储了最新产生的事件。通过提供&nbsp;<code>popPostEvent</code>&nbsp;和&nbsp;<code>popPreEvent</code>&nbsp;方法，测试代码能够取出最新事件进行验证。</p><blockquote><p>通常这种 “Dummy” 或者 “Mock” 实现用于测试场景中，模拟事件监听器的行为，或作为简单的占位实现，用于验证事件发布和消费逻辑。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Event</span> <span class="token function">popPostEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>postEvents<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"No events to pop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> postEvents<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">PreEvent</span> <span class="token function">popPreEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>preEvents<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"No events to pop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> preEvents<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时提供了一个异步实现 <code>DummyAsyncEventListener</code> ，这个类使用 <code>tryGetPreEvents</code> 和 <code>tryGetPostEvents</code> 方法来异步获取事件。</p><ol><li>最多等待 20 秒；</li><li>轮训间隔 10 毫秒；</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PreEvent</span><span class="token punctuation">&gt;</span></span> <span class="token function">tryGetPreEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Awaitility</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">atMost</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">pollInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">until</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">getPreEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">getPreEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span> <span class="token function">tryGetPostEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Awaitility</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">atMost</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">pollInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">until</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">getPostEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">getPostEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="asyncqueuelistener"><a class="markdownIt-Anchor" href="#asyncqueuelistener"></a> AsyncQueueListener</h3><p><code>AsyncQueueListener</code>&nbsp;实现了&nbsp;<code>EventListenerPlugin</code>&nbsp;接口，用于异步地接收并分发事件。其核心思想是利用一个阻塞队列（<code>BlockingQueue&lt;BaseEvent&gt;</code>）缓存事件，再由一个专门的线程（<code>asyncProcessor</code>）不停地从队列中取出事件，并把这些事件分发给所有真实的监听器。这种方式的好处在于能够解耦事件的产生和事件的处理，实现异步分发，提升系统的响应能力。</p><p>关键字段</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 原子标志，表示异步监听器是否已经停止。</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicBoolean</span> stopped：<span class="token comment">// 用于记录队列因满或者其他原因而丢弃的事件数量。</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> dropEventCounters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> lastDropEventCounters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 最后一次事件记录的事件，使用 Instant 对象</span><span class="token keyword">private</span> <span class="token class-name">Instant</span> lastRecordDropEventTime<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>processEvents</code> 方法用于处理事件，它的核心逻辑如下：</p><ul><li>该方法位于无限循环中，使用&nbsp;<code>queue. take ()</code>&nbsp;阻塞等待队列中有事件可以处理。</li><li>判断取出的事件是 PreEvent 或 PostEvent，并分别调用所有监听器对应的&nbsp;<code>onPreEvent</code>&nbsp;或&nbsp;<code>onPostEvent</code>&nbsp;方法。</li><li>在处理过程中捕获&nbsp;<code>InterruptedException</code>（线程被中断时退出循环）以及其他异常，并记录日志信息。</li></ul><h2 id="改进"><a class="markdownIt-Anchor" href="#改进"></a> 改进</h2><h3 id="event-实现增强"><a class="markdownIt-Anchor" href="#event-实现增强"></a> Event 实现增强</h3><p>使用 <code>instanceOf</code> 进行分支判断这种实现非常的糟糕，具体来说</p><ul><li>当前实现对支持的事件类型进行硬编码。每当添加一个新的事件类型（例如，FailureEvent、AuditEvent）时，都必须修改 <code>dispatchEvent</code> 方法。</li><li>如果事件类型的数量在未来增加或变得更细粒度，很容易错过处理某些分支;</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token class-name">BaseEvent</span> baseEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>baseEvent <span class="token keyword">instanceof</span> <span class="token class-name">PreEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">dispatchPreEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PreEvent</span><span class="token punctuation">)</span> baseEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>baseEvent <span class="token keyword">instanceof</span> <span class="token class-name">Event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">dispatchPostEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Event</span><span class="token punctuation">)</span> baseEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Unknown event type:"</span> <span class="token operator">+</span> baseEvent<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个更好的实现应具备如下特点</p><ul><li>类型安全：消除 <code>instanceof</code> 检查，所有的问题都会在编译期暴露；</li><li>解耦：事件只负责调用 <code>accept</code> 方法，不关心监听器的实现；</li><li>强封装：通过限制对访问者方法的直接访问，防止外部误用；</li><li>扩展性：添加新的事件类型只需要创建新的类和 <code>visitXXX ()</code> 方法，而无需修改分发逻辑；</li></ul><p><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/20250530130950.png" alt="EventDispatcher类图"></p><p>为了限制外部对访问者方法的直接访问，因此使用一个内部静态类来实现 <code>EventDispatcher</code> 接口，具体代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">InternalVisitor</span> <span class="token keyword">implements</span> <span class="token class-name">EventDispatcher</span> <span class="token punctuation">{</span>    <span class="token comment">/** {@inheritDoc} */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchPreEvent</span><span class="token punctuation">(</span><span class="token class-name">PreEvent</span> event<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ForbiddenException</span> <span class="token punctuation">{</span>      eventListeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>eventListener <span class="token operator">-&gt;</span> eventListener<span class="token punctuation">.</span><span class="token function">onPreEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/** {@inheritDoc} */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchPostEvent</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      eventListeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>eventListener <span class="token operator">-&gt;</span> eventListener<span class="token punctuation">.</span><span class="token function">onPostEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过改造，EventBus 的 <code>dispatchEvent</code> 方法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token class-name">BaseEvent</span> baseEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    baseEvent<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>internalVisitor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gravitino </tag>
            
            <tag> 元数据 </tag>
            
            <tag> 统一元数据 </tag>
            
            <tag> AI Infra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful 架构</title>
      <link href="/2025/03/24/computer/2025-03-24-restful-api/"/>
      <url>/2025/03/24/computer/2025-03-24-restful-api/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h2><p>REST (Representational State Transfer)，中文意思是：表述性状态转移。即一组架构约束条件和原则，如果一个架构符合 REST 的约束条件和原则，我们就称它为 RESTful 架构。</p><ol><li>在 REST 中，一切的内容都被认为是一种资源</li><li>每个资源都由 URI 唯一标识</li><li>使用统一的接口处理资源请求（POST/GET/PUT/DELETE/HEAD）</li><li>无状态（每次请求之前是无关联，没有 session ）</li></ol><p>REST 可以理解为 Client 和 Server 之间的一种交互方式，即 Client 发出 HTTP 请求，Server 端的资源发生状态转移，例如更新、删除等。而 RESTful API 则可以理解为 Server 端提供具有 REST 风格的接口。</p><p>符合 REST 规范的服务不应该保存客户端状态也不会保存应用的状态。</p><h3 id="资源和-uri"><a class="markdownIt-Anchor" href="#资源和-uri"></a> 资源和 URI</h3><ol><li>使用&nbsp;<code>/</code>&nbsp;来表示资源的层级关系</li><li>使用&nbsp;<code>?</code>&nbsp;用来过滤资源</li><li>使用&nbsp;<code>_</code>&nbsp;或者&nbsp;<code>-</code>&nbsp;让 URI 的可读性更好</li><li><code>,</code>&nbsp;或&nbsp;<code>;</code>&nbsp;可以用来表示同级资源的关系</li></ol><h3 id="统一资源接口"><a class="markdownIt-Anchor" href="#统一资源接口"></a> 统一资源接口</h3><table><thead><tr><th>请求方法</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>获取某个资源。幂等（取多少次结果都没有变化）</td></tr><tr><td>POST</td><td>创建一个新的资源</td></tr><tr><td>PUT</td><td>替换某个已有的资源（更新操作） ，幂等（更新多次只保存一个结果）</td></tr><tr><td>DELETE</td><td>删除某个资源</td></tr><tr><td>HEAD</td><td>主要用于确认 URL 的有效性以及资源更新的日期时间等</td></tr><tr><td>PATCH</td><td>新引入的，对 PUT 方法的补充，用来对已知资源进行局部更新</td></tr></tbody></table><h3 id="资源表述"><a class="markdownIt-Anchor" href="#资源表述"></a> 资源表述</h3><p>客户端通过 HTTP 方法可以获取资源，确切的来说，客户端获取的只是资源的表述而已，传输的不是资源本身。资源的表述包括数据和描述数据的元数据，例如，HTTP 头 “Content-Type” 就是这样一个元数据属性。客户端可以通过 <code>Accept</code> 头请求一种特定格式的表述，服务端则通过 <code>Content-Type</code> 告诉客户端资源的表述形式。</p><h2 id="实践"><a class="markdownIt-Anchor" href="#实践"></a> 实践</h2><ol><li>将 API 部署在专用域名之下；</li><li>将 API 的版本号放入 URL；</li><li>在 RESTful 架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的 ”集合”（collection），所以 API 中的名词也应该使用复数。</li><li>如果记录数量很多，服务器不可能都将它们返回给用户。API 应该提供参数，过滤返回结果</li><li>服务器向用户返回的状态码和提示信息</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://api.douban.com/v2/book/:id <span class="token punctuation">(</span>获取图书信息<span class="token punctuation">)</span>http://api.douban.com/v2/movie/subject/:id <span class="token punctuation">(</span>电影条目信息<span class="token punctuation">)</span>http://api.douban.com/v2/music/:id <span class="token punctuation">(</span>获取音乐信息<span class="token punctuation">)</span>http://api.douban.com/v2/event/:id <span class="token punctuation">(</span>获取同城活动<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> REST架构 </tag>
            
            <tag> HTTP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>参数表示方法及语法约定</title>
      <link href="/2025/03/24/computer/2025-03-24-arguments-signature/"/>
      <url>/2025/03/24/computer/2025-03-24-arguments-signature/</url>
      
        <content type="html"><![CDATA[<h2 id="表示方法"><a class="markdownIt-Anchor" href="#表示方法"></a> 表示方法</h2><ol><li><code>[ ]</code>： 表示<strong>可选参数</strong>，使用时可以省略</li><li><code>&lt; &gt;</code>： 表示<strong>必选参数</strong>，必须提供具体值</li><li><code>{ }</code>： 表示<strong>选择性参数</strong>，需从中选择一个选项，通常与&nbsp;<code>|</code>&nbsp;一起使用</li><li><code>( )</code>： 表示<strong>默认参数</strong>值</li><li><code>|</code>： 表示<strong>互斥选项</strong>，只能选择其中一个</li><li><code>…</code>： 表示<strong>可重复的前项</strong>，允许多次使用前面的参数</li><li><code>--</code>： 通常表示<strong>长选项名称</strong>（如&nbsp;<code>--help</code>）</li><li><code>-</code>：通常表示<strong>短选项</strong>（如&nbsp;<code>-h</code>）</li></ol><h2 id="特殊表示方法"><a class="markdownIt-Anchor" href="#特殊表示方法"></a> 特殊表示方法</h2><ul><li><strong>粗体</strong>： 表示必须按原样键入的命令或关键字；</li><li><strong>占位符</strong>：<code>$VAR</code> 或者 <code>%VAR%</code> 表示环境变量或者需要替换的值。</li></ul><h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2><h3 id="命令行工具-cli"><a class="markdownIt-Anchor" href="#命令行工具-cli"></a> 命令行工具 (CLI)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Linux/Unix man 页面风格</span><span class="token builtin class-name">command</span> <span class="token punctuation">[</span>-a<span class="token punctuation">]</span> <span class="token punctuation">[</span>-b value<span class="token punctuation">]</span> file<span class="token punctuation">..</span>.<span class="token comment"># 多层嵌套表示</span><span class="token function">git</span> checkout <span class="token punctuation">[</span>-q<span class="token punctuation">]</span> <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token punctuation">[</span>-m<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token function">git</span> checkout <span class="token punctuation">[</span>-q<span class="token punctuation">]</span> <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token punctuation">[</span>-m<span class="token punctuation">]</span> <span class="token parameter variable">--detach</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token function">git</span> checkout <span class="token punctuation">[</span>-q<span class="token punctuation">]</span> <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token punctuation">[</span>-m<span class="token punctuation">]</span> <span class="token punctuation">[</span>--detach<span class="token punctuation">]</span> <span class="token operator">&lt;</span>commit<span class="token operator">&gt;</span><span class="token comment"># GNU 风格</span>program <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sql-示例"><a class="markdownIt-Anchor" href="#sql-示例"></a> SQL 示例</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">case</span> <span class="token operator">&lt;</span>col<span class="token operator">&gt;</span>  <span class="token keyword">when</span> <span class="token operator">&lt;</span>v<span class="token operator">&gt;</span> <span class="token keyword">then</span> <span class="token operator">&lt;</span>answer<span class="token operator">&gt;</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token keyword">when</span> <span class="token operator">&lt;</span>v<span class="token operator">&gt;</span> <span class="token keyword">then</span> <span class="token operator">&lt;</span>answer<span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token keyword">else</span> {answer}<span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token punctuation">[</span><span class="token keyword">as</span> alis<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="git-示例"><a class="markdownIt-Anchor" href="#git-示例"></a> Git 示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> <span class="token punctuation">[</span>-t <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-m <span class="token operator">&lt;</span>master<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token punctuation">[</span>--<span class="token punctuation">[</span>no-<span class="token punctuation">]</span>tags<span class="token punctuation">]</span> <span class="token punctuation">[</span>--mirror<span class="token operator">=</span><span class="token operator">&lt;</span>fetch<span class="token operator">|</span>push<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 技术文档写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025-03-20 小记</title>
      <link href="/2025/03/20/diarly/2025-03-20-diary/"/>
      <url>/2025/03/20/diarly/2025-03-20-diary/</url>
      
        <content type="html"><![CDATA[<h2 id="2025-03-20-小记"><a class="markdownIt-Anchor" href="#2025-03-20-小记"></a> 2025-03-20 小记</h2><ul><li>心情: 🟡</li><li>天气: ☀️</li></ul><p><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/20250321102250.png" alt="繁星厅"></p><p>与狗狗一同前往三元桥附近的VTD婚礼艺术中心参观。该中心设有两个宴会厅：一个采用金色系打造的宫廷风格厅（繁星厅），另一个则是以粉色为主的可爱风格厅（星宇厅）。经过考察，我认为这家场地并无特别出色之处，反而存在几个明显的不足：</p><ol><li>没有园区：入口直接面向繁忙马路，给人杂乱的第一印象；</li><li>选择有限：目前仅有两个厅可供使用，另外两个宴会厅尚处于预售阶段；</li><li>装饰简陋：主大厅虽然宽敞但装饰元素匮乏，整体氛围冷清；</li><li>价格偏高：与其他同类场所（如格乐利雅、花嫁丽舍、繁景艺术中心）相比，收费更高却未能提供相应品质的餐饮服务；</li><li>销售服务欠佳：销售人员不仅迟到，且态度缺乏诚意；</li><li>场地改造痕迹明显：场地并非原生婚宴设计，很容易察觉到这里之前是工厂改建而成。</li></ol><p>综合价格与服务因素考量，我不会将此处列入备选名单。</p>]]></content>
      
      
      <categories>
          
          <category> 日记随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
            <tag> 生活 </tag>
            
            <tag> 备婚日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>亚洲疾病问题</title>
      <link href="/2025/03/19/qu-wen/2025-03-19-asian-illness/"/>
      <url>/2025/03/19/qu-wen/2025-03-19-asian-illness/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>两个经济学家卡拉曼和特沃斯基于 1981 年进行了亚洲疾病问题，有一种疾病如果不进行治疗，每天死 600 人，现有两种疗法：</p><ul><li>疗法 A：600 人中 200 人生还；1</li><li>疗法 B：有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 的概率 600 人都存活，有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>2</mn><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{2}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 的概率无人生还；</li></ul><p>做如下实验：</p><ul><li>实验 1：跟被实验个体将疗法 A 和 B 原封不动的说出来；</li><li>实验 2：针对疗法 A 和 B，重新更改叙述<ul><li>A：会有 400 人死去；</li><li>B： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 的概率无人死去，有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>2</mn><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{2}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 的概率无人生还；</li></ul></li></ul><p>实验结果如下：</p><ul><li>实验 1 有 152 人参与，<strong>72%的人选择疗法 A</strong>，28%的人选择疗法 B；</li><li>实验 2 有 155 人参与，22%的人选择疗法 A，<strong>78%的人选择疗法 B</strong>；</li></ul><p>实验结果证明：</p><ul><li>在有收益的情况下人们是<strong>风险厌恶</strong>的；</li><li>在确定损失的情况下人们是<strong>风险偏好</strong>的；</li></ul><h2 id="框架效应"><a class="markdownIt-Anchor" href="#框架效应"></a> 框架效应</h2><ol><li>风险选择框架<ul><li>在有收益的情况下人们是<strong>风险厌恶</strong>的；</li><li>在确定损失的情况下人们是<strong>风险偏好</strong>的；</li></ul></li><li>特性框架：人们心中存在积极框架和消极框架，如果问题以积极的方式描述的时候就会开心，反之亦然；</li><li>目的性框架：为了达成某种目的，<strong>对同一个问题使用不同的描述产生的效果是不同的</strong>；</li></ol><h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2><table><thead><tr><th></th><th>积极</th><th>消极</th></tr></thead><tbody><tr><td>卖肉</td><td>75%瘦肉</td><td>25%肥肉</td></tr><tr><td>手术</td><td>90%存活率</td><td>10%死亡率</td></tr><tr><td>算命</td><td>你比较长寿啊</td><td>家人比你早死</td></tr><tr><td>加油</td><td>5.6 元/升，现金结账优惠 0.6 元。</td><td>5 元/升，使用信用卡+0.6 元</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 趣闻 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率 </tag>
            
            <tag> Summary </tag>
            
            <tag> psychology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025-03-18 小记</title>
      <link href="/2025/03/18/diarly/2025-03-18-diary/"/>
      <url>/2025/03/18/diarly/2025-03-18-diary/</url>
      
        <content type="html"><![CDATA[<h2 id="2025-03-18-小记"><a class="markdownIt-Anchor" href="#2025-03-18-小记"></a> 2025-03-18 小记</h2><ul><li>心情: 🟢</li><li>天气: ☀️</li></ul><p><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/20250319160753.png" alt="璟*空间"></p><p>今日与小狗参观了优悦繁景的璟*空间宴会厅，整体印象中规中矩。该场地确有几处亮点：</p><ol><li>空间格局宽敞，宴会厅连同户外草坪总面积达2000平方米；</li><li>高度自由度，室内宴会厅及户外草坪均支持个性化DIY布置；</li><li>餐桌花艺设计雅致精美，视觉效果出众。</li></ol><p>然而，场地也存在一些明显不足：</p><ol><li>场馆前道路状况极差，影响整体到访体验；</li><li>园区环境欠佳，周边商家类型混杂，缺乏高端氛围；</li><li>地理位置较为偏远（位于草房地区），交通便利性不足；</li><li>场地周边一公里范围内设有大型火葬场，从风水角度考量略显不妥。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日记随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
            <tag> 生活 </tag>
            
            <tag> 备婚日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛希极限</title>
      <link href="/2025/03/18/qu-wen/2025-03-18-roche-limit/"/>
      <url>/2025/03/18/qu-wen/2025-03-18-roche-limit/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>传统惯性参考系：传统观点认为<strong>静止或者匀速直线运动</strong>的参考系或者<strong>牛顿第一定律成立</strong>的参考系。<br>广义惯性系：在一个引力场中做自由运动且不旋转的参考系是惯性参考系。<br>惯性力：速参考系中应用牛顿定律所产生的一个虚拟力，指的是物体所受的虚拟力。</p><p><strong>示例</strong>：</p><p>在一个加速运动的火车上的人。</p><ul><li>地面参考系：车停止则人停止；</li><li>火车参考系：存在惯性力，大小 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>=</mo><mi>m</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">F=ma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span></span></span></span> ，方向和火车方向相反；</li></ul><h2 id="潮汐力"><a class="markdownIt-Anchor" href="#潮汐力"></a> 潮汐力</h2><p>潮汐力是由于一个天体（如月球或太阳）对另一个天体（如地球）不同部位的引力差异而产生的力。这种力导致了海洋潮汐等现象。<br><strong>场景</strong></p><p>地球被木星吸引，描述在地球上的个人受力；<br><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/%E6%B4%9B%E5%B8%8C%E6%9E%81%E9%99%90_image_1.png" alt="受力分析"></p><p>一个人的受力： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>=</mo><mtext>地球万有引力</mtext><mo>+</mo><mtext>木星万有引力</mtext><mo>+</mo><mtext>惯性力</mtext></mrow><annotation encoding="application/x-tex">F=地球万有引力+木星万有引力+惯性力</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">球</span><span class="mord cjk_fallback">万</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">引</span><span class="mord cjk_fallback">力</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">木</span><span class="mord cjk_fallback">星</span><span class="mord cjk_fallback">万</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">引</span><span class="mord cjk_fallback">力</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">惯</span><span class="mord cjk_fallback">性</span><span class="mord cjk_fallback">力</span></span></span></span> ；<br>潮汐力大小： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>=</mo><mtext>木星万有引力</mtext><mo>+</mo><mtext>惯性力</mtext></mrow><annotation encoding="application/x-tex">F=木星万有引力+惯性力</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">木</span><span class="mord cjk_fallback">星</span><span class="mord cjk_fallback">万</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">引</span><span class="mord cjk_fallback">力</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">惯</span><span class="mord cjk_fallback">性</span><span class="mord cjk_fallback">力</span></span></span></span> ；</p><ul><li>People1：木星引力&gt;惯性力；</li><li>People2：木星引力&lt;惯性力；</li></ul><h2 id="洛希极限"><a class="markdownIt-Anchor" href="#洛希极限"></a> 洛希极限</h2><p>洛希极限：<strong>当小天体所受到的潮汐力=自身的引力时，之间的距离称之为洛溪极限</strong>。</p><p>刚体洛希极限计算公式， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ρ</mi><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">\rho_{M}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">ρ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 代表大天体密度； <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ρ</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">\rho_{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">ρ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 代表小天体密度； <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">R_{M}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 代表大天体半径。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>r</mi><mo>=</mo><mn>1.26</mn><mo>×</mo><mroot><mfrac><msub><mi>ρ</mi><mi>M</mi></msub><msub><mi>ρ</mi><mi>m</mi></msub></mfrac><mn>3</mn></mroot><mo>×</mo><msub><mi>R</mi><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">r=1.26 \times \sqrt[3]{\frac{\rho_{M}}{\rho_{m}} } \times R_{M}  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">2</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.44em;vertical-align:-0.9925650000000004em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5951419999999995em;"><span style="top:-2.7729219999999994em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4474349999999996em;"><span class="svg-align" style="top:-4.4em;"><span class="pstrut" style="height:4.4em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">ρ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">ρ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.407435em;"><span class="pstrut" style="height:4.4em;"></span><span class="hide-tail" style="min-width:1.02em;height:2.48em;"><svg width="400em" height="2.48em" viewBox="0 0 400000 2592" preserveAspectRatio="xMinYMin slice"><path d="M424,2478c-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514c0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20s-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121s209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1014.6s-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185c-2,6,-10,9,-24,9c-8,0,-12,-0.7,-12,-2z M1001 80h400000v40h-400000z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9925650000000004em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>流体洛希极限计算公式， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ρ</mi><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">\rho_{M}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">ρ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 代表大天体密度； <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ρ</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">\rho_{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">ρ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 代表小天体密度； <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">R_{M}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 代表大天体半径。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>r</mi><mo>=</mo><mn>2.44</mn><mo>×</mo><mroot><mfrac><msub><mi>ρ</mi><mi>M</mi></msub><msub><mi>ρ</mi><mi>m</mi></msub></mfrac><mn>3</mn></mroot><mo>×</mo><msub><mi>R</mi><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">r=2.44 \times \sqrt[3]{\frac{\rho_{M}}{\rho_{m}} } \times R_{M}  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">4</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.44em;vertical-align:-0.9925650000000004em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5951419999999995em;"><span style="top:-2.7729219999999994em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4474349999999996em;"><span class="svg-align" style="top:-4.4em;"><span class="pstrut" style="height:4.4em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">ρ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">ρ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.407435em;"><span class="pstrut" style="height:4.4em;"></span><span class="hide-tail" style="min-width:1.02em;height:2.48em;"><svg width="400em" height="2.48em" viewBox="0 0 400000 2592" preserveAspectRatio="xMinYMin slice"><path d="M424,2478c-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514c0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20s-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121s209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1014.6s-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185c-2,6,-10,9,-24,9c-8,0,-12,-0.7,-12,-2z M1001 80h400000v40h-400000z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9925650000000004em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><h2 id="应用"><a class="markdownIt-Anchor" href="#应用"></a> 应用</h2><h3 id="土星光环"><a class="markdownIt-Anchor" href="#土星光环"></a> 土星光环</h3><p>土星光环：科学家认为一颗彗星被土星潮汐力撕碎了，形成了光环。</p><h3 id="苏梅克列维-9-号"><a class="markdownIt-Anchor" href="#苏梅克列维-9-号"></a> 苏梅克列维 9 号</h3><p>苏梅克列维 9 号于 1992 年被木星潮汐力撕碎，1994 年与木星相撞。</p><h3 id="流浪地球"><a class="markdownIt-Anchor" href="#流浪地球"></a> 流浪地球</h3><p>假设地球是一个刚体，那么他的洛希极限是<strong>5.6WKM</strong>，比木星的半径<strong>7.15WKM</strong> 要小，这说明地球必须进入木星才会被潮汐力撕碎。假定地球是一个流体，那么它的洛希极限是<strong>10.9WKM</strong>。由于地球既不是流体也不是刚体，所以他和木星的洛希极限应该在<strong>5.6WKM</strong>和<strong>10.9WKM</strong>之间。</p><blockquote><p>Moss 给出的洛希极限其实是太阳和木星的（<strong>89WKM</strong>和<strong>171WKM</strong>），而不是地球和木星的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 趣闻 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Summary </tag>
            
            <tag> Astronomy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单利和复利</title>
      <link href="/2025/03/17/qu-wen/2025-03-17-compound-interest/"/>
      <url>/2025/03/17/qu-wen/2025-03-17-compound-interest/</url>
      
        <content type="html"><![CDATA[<h2 id="欧拉数"><a class="markdownIt-Anchor" href="#欧拉数"></a> 欧拉数</h2><p>欧拉数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">e</mi></mrow><annotation encoding="application/x-tex">\mathrm{e}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">e</span></span></span></span></span> ：不是欧拉第一个提出，欧拉只是第一个使用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">e</mi></mrow><annotation encoding="application/x-tex">\mathrm{e}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">e</span></span></span></span></span> 来表示自然对数的人；</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">e</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><msup><mo stretchy="false">)</mo><mi>n</mi></msup><mo separator="true">,</mo><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\mathrm{e}=(1+\frac{1}{n})^{n},n\rightarrow \infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">e</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></span></p><h2 id="复利"><a class="markdownIt-Anchor" href="#复利"></a> 复利</h2><p>举一个实际的例子，假定名义利率 10%，半年一复利，即半年名义利率 5%，本金 100 元，则：</p><ul><li>上半年： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>100</mn><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>0.05</mn><mo stretchy="false">)</mo><mo>=</mo><mn>105</mn></mrow><annotation encoding="application/x-tex">100 \times (1+0.05) = 105</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">5</span></span></span></span></li><li>下半年： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>105</mn><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>0.05</mn><mo stretchy="false">)</mo><mo>=</mo><mn>110.25</mn></mrow><annotation encoding="application/x-tex">105 \times(1+0.05) = 110.25</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">.</span><span class="mord">2</span><span class="mord">5</span></span></span></span></li></ul><p>如果没有复利，则一年收益为 110，如果有复利的情况下，实际利率为 10.25%。如果复利无限细分，那么会发生什么呢？假定 n 期的情况下，计算公式变为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mi>V</mi><mo>=</mo><mi>P</mi><mi>V</mi><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mi>r</mi><mi>n</mi></mfrac><msup><mo stretchy="false">)</mo><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">FV = PV \times(1+\frac{r}{n})^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></p><p>r 表示名义利率；n 表示期数；PV 表示本金；FV 表示收益。当无限复利发生时，整个公式变为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mi>V</mi><mo>=</mo><mi>P</mi><mi>V</mi><mo>×</mo><msup><mi mathvariant="normal">e</mi><mi>r</mi></msup><mo separator="true">,</mo><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">FV = PV \times \mathrm{e}^r,n\rightarrow \infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9088319999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">e</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></span></p><p>此时如果名义利率是 10%，本金 100，则 FV=110.517；如果名义利率提升到 100%，则 FV=271.8。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ol><li>复利有他的极限，极限就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="normal">e</mi><mi>r</mi></msup></mrow><annotation encoding="application/x-tex">\mathrm{e}^r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">e</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span> ；</li><li>复利的结果仅和名义利率有关系，和其他因素都没有关系；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 趣闻 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试页面</title>
      <link href="/2025/03/17/2025-03-17-page-test/"/>
      <url>/2025/03/17/2025-03-17-page-test/</url>
      
        <content type="html"><![CDATA[<h2 id="二级标题"><a class="markdownIt-Anchor" href="#二级标题"></a> 二级标题</h2><h3 id="三级标题"><a class="markdownIt-Anchor" href="#三级标题"></a> 三级标题</h3><h4 id="四级标题"><a class="markdownIt-Anchor" href="#四级标题"></a> 四级标题</h4><h5 id="五级标题"><a class="markdownIt-Anchor" href="#五级标题"></a> 五级标题</h5><h6 id="六级标题"><a class="markdownIt-Anchor" href="#六级标题"></a> 六级标题</h6><h2 id="段落"><a class="markdownIt-Anchor" href="#段落"></a> 段落</h2><p>I think I’ll use it to format all of my documents from now on.First line with the HTML tag after.</p><p>And the next line.</p><p>Apache Derby 是由 Apache Software Foundation 开发的关系数据库管理系统()。是一个完全用 java 编写的数据库，Derby 是一个 Open source 的产品，基于 Apache License 2.0分发。</p><p>Apache Derby 非常小巧，核心部分 derby. jar 只有 2M，所以既可以做为单独的数据库服务器使用，也可以内嵌在应用程序中使用。</p><h2 id="有序列表"><a class="markdownIt-Anchor" href="#有序列表"></a> 有序列表</h2><ol><li>1</li><li>2</li><li>3</li><li>4</li></ol><h2 id="无序列表"><a class="markdownIt-Anchor" href="#无序列表"></a> 无序列表</h2><ul><li>1</li><li>2</li><li>3</li><li>4</li></ul><h2 id="任务列表"><a class="markdownIt-Anchor" href="#任务列表"></a> 任务列表</h2><ul><li>[ ] Eat</li><li>[x] Code<ul><li>[x] HTML</li><li>[x] CSS</li><li>[x] JavaScript</li></ul></li><li>[ ] Sleep</li></ul><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><h3 id="代码块"><a class="markdownIt-Anchor" href="#代码块"></a> 代码块</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span><span class="token punctuation">(</span> id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span> name STRING<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="行内代码"><a class="markdownIt-Anchor" href="#行内代码"></a> 行内代码</h3><p><code>import numpy as np</code><br><code>sb.append("a");</code><br><code>select * from tbl;</code></p><h2 id="字体变化"><a class="markdownIt-Anchor" href="#字体变化"></a> 字体变化</h2><p>加粗：<strong>加粗</strong><br>斜体：<em>斜体</em><br>高亮：<mark>高亮</mark><br>删除线：<s>删除线</s><br>下划线：<u>下划线</u><br>斜体加粗：<em><strong>斜体加粗</strong></em></p><h2 id="表格"><a class="markdownIt-Anchor" href="#表格"></a> 表格</h2><table><thead><tr><th style="text-align:left">left</th><th style="text-align:center">center</th><th style="text-align:right">right</th></tr></thead><tbody><tr><td style="text-align:left">aaaa</td><td style="text-align:center">bbbbbb</td><td style="text-align:right">ccccc</td></tr><tr><td style="text-align:left">a</td><td style="text-align:center">b</td><td style="text-align:right">c</td></tr></tbody></table><p>添加链接的表格</p><table><thead><tr><th>name</th><th>age</th><th>blog</th></tr></thead><tbody><tr><td><em>LearnShare</em></td><td>12</td><td><a href="http://xianbai.me">LearnShare</a></td></tr><tr><td><strong>Mike</strong></td><td>32</td><td><a href="http://mike.me">Mike</a></td></tr></tbody></table><h2 id="分割线"><a class="markdownIt-Anchor" href="#分割线"></a> 分割线</h2><hr><h2 id="链接"><a class="markdownIt-Anchor" href="#链接"></a> 链接</h2><p>外部链接：<a href="https://www.google.com/">Google</a><br>内部链接：[[红景天]]<br>块链接：[[#无序列表]]<br>网站链接： <a href="https://markdown.com.cn">https://markdown.com.cn</a><br>加粗格式链接：I love supporting the <strong><a href="https://eff.org">EFF</a></strong>.<br>斜体格式链接：This is the <em><a href="https://www.markdownguide.org">Markdown Guide</a></em>.<br>代码格式链接：See the section on <a href="#code"><code>code</code></a>.</p><h2 id="html"><a class="markdownIt-Anchor" href="#html"></a> HTML</h2><p>按键：<kbd>Ctrl</kbd>+<kbd>c</kbd></p>]]></content>
      
      
      <categories>
          
          <category> PKM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>炸金花</title>
      <link href="/2025/03/17/qu-wen/2025-03-17-chinese-poker/"/>
      <url>/2025/03/17/qu-wen/2025-03-17-chinese-poker/</url>
      
        <content type="html"><![CDATA[<h2 id="炸金花规则"><a class="markdownIt-Anchor" href="#炸金花规则"></a> 炸金花规则</h2><p>游戏参与人数 2-6 人，使用一副去掉到大小王的扑克牌，共 52 张牌。比牌时双方不能看到互相的牌，胜者继续游戏直至结束本局，负者损失本副牌的操作权，只在每局牌结束时可见。比牌时如出现双方牌型及大小相同的情况，主动比牌者为负者。每局结束时，所有玩家只能看见自己比过或跟自己比过的玩家的手牌。</p><p>豹子&gt;同花顺&gt;同花&gt;顺子&gt;一对&gt;散牌</p><blockquote><p>牌型大小和抽到的概率一定成反比吗？</p></blockquote><h2 id="概率"><a class="markdownIt-Anchor" href="#概率"></a> 概率</h2><ul><li>总共的牌型数量： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>C</mi><mn>52</mn><mn>3</mn></msubsup><mo>=</mo><mfrac><mrow><mn>52</mn><mo>×</mo><mn>51</mn><mo>×</mo><mn>50</mn></mrow><mrow><mn>1</mn><mo>×</mo><mn>2</mn><mo>×</mo><mn>3</mn></mrow></mfrac><mo>=</mo><mn>22100</mn></mrow><annotation encoding="application/x-tex">C_{52}^{3} = \frac{52 \times 51 \times 50}{1 \times 2 \times 3} = 22100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">×</span><span class="mord mtight">2</span><span class="mbin mtight">×</span><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">2</span><span class="mbin mtight">×</span><span class="mord mtight">5</span><span class="mord mtight">1</span><span class="mbin mtight">×</span><span class="mord mtight">5</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">2</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span></li><li>豹子： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>13</mn><mo>×</mo><mn>4</mn><mo>=</mo><mn>52</mn></mrow><annotation encoding="application/x-tex">13 \times 4=52</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">2</span></span></span></span></li><li>同花顺： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>×</mo><mn>12</mn><mo>=</mo><mn>48</mn></mrow><annotation encoding="application/x-tex">4\times 12=48</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">8</span></span></span></span></li><li>同花： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>×</mo><msubsup><mi>C</mi><mn>13</mn><mn>3</mn></msubsup><mo>−</mo><mn>48</mn><mo>=</mo><mn>1096</mn></mrow><annotation encoding="application/x-tex">4\times C_{13}^{3} - 48=1096</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">3</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">9</span><span class="mord">6</span></span></span></span></li><li>顺子： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>12</mn><mo>×</mo><mn>4</mn><mo>×</mo><mn>4</mn><mo>×</mo><mn>4</mn><mo>−</mo><mn>48</mn><mo>=</mo><mn>720</mn></mrow><annotation encoding="application/x-tex">12 \times 4\times 4 \times 4 - 48 = 720</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mord">2</span><span class="mord">0</span></span></span></span></li><li>对子： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>13</mn><mo>×</mo><msubsup><mi>C</mi><mn>4</mn><mn>2</mn></msubsup><mo>∗</mo><mn>48</mn><mo>=</mo><mn>3744</mn></mrow><annotation encoding="application/x-tex">13 \times C_{4}^{2} * 48 = 3744</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">7</span><span class="mord">4</span><span class="mord">4</span></span></span></span></li><li>散牌： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>22100</mn><mo>−</mo><mn>52</mn><mo>−</mo><mn>48</mn><mo>−</mo><mn>1096</mn><mo>−</mo><mn>720</mn><mo>−</mo><mn>3744</mn><mo>=</mo><mn>16440</mn></mrow><annotation encoding="application/x-tex">22100-52-48-1096-720-3744=16440</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">2</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">9</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">7</span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">7</span><span class="mord">4</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">4</span><span class="mord">4</span><span class="mord">0</span></span></span></span></li></ul><p>如果按照概率：同花顺&gt;豹子&gt;顺子&gt;同花&gt;对子&gt;散牌</p><table><thead><tr><th></th><th style="text-align:center">豹子</th><th style="text-align:center">同花顺</th><th style="text-align:center">同花</th><th style="text-align:center">顺子</th><th style="text-align:center">一对</th></tr></thead><tbody><tr><td>p</td><td style="text-align:center">0.24%</td><td style="text-align:center">0.22%</td><td style="text-align:center">5.0%</td><td style="text-align:center">3.3%</td><td style="text-align:center">16.9%</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>p</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.326216em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td style="text-align:center">425</td><td style="text-align:center">460</td><td style="text-align:center">20</td><td style="text-align:center">31</td><td style="text-align:center">6</td></tr></tbody></table><h2 id="跟人数的关系"><a class="markdownIt-Anchor" href="#跟人数的关系"></a> 跟人数的关系</h2><p>如果是一个人玩游戏，那么他的概率就是上面分析的，但是多人游戏的情况下是否会对整体有任何影响呢？</p><p><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/%E7%82%B8%E9%87%91%E8%8A%B1_image_1.png" alt="概率"></p><p><img src="https://typora-img-chart.oss-cn-beijing.aliyuncs.com/%E7%82%B8%E9%87%91%E8%8A%B1_image_2.png" alt="金花概率"></p><h2 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h2><ol><li>无论多少人玩游戏，顺子的概率低于金花，同花顺的概率低于豹子；</li><li>炸金花游戏不是牌型越大越难抓；</li><li>扑克不是完全的概率游戏，需要心里博弈；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 趣闻 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈论 </tag>
            
            <tag> 概率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/03/17/hello-world/"/>
      <url>/2025/03/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
